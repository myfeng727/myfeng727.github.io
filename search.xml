<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdown的食用方法</title>
      <link href="/%E5%B7%A5%E5%85%B7/markdown%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/%E5%B7%A5%E5%85%B7/markdown%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本博客里面的内容都是使用Markdown书写，为了防止以后书写博客忘记某个标记还需要到处翻网页，所以集合一下Markdown的语法。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>Markdown支持6种级别的标题，对应<code>html</code>标签<code>h1~h6</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line"><span class="section">## h2</span></span><br><span class="line"><span class="section">### h3</span></span><br><span class="line"><span class="section">#### h4</span></span><br><span class="line"><span class="section">##### h5</span></span><br><span class="line"><span class="section">###### h6</span></span><br></pre></td></tr></table></figure><h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>使用<code>&gt;</code>用于段首进行强调，被强调的文字部分将会被高亮显示。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这段文字将被高亮显示</span></span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>这段文字将被高亮显示</p></blockquote><h1 id="插入连接或图片"><a href="#插入连接或图片" class="headerlink" title="插入连接或图片"></a>插入连接或图片</h1><p>区别在于插入图片前面需要添加一个感叹号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">点击跳转到百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line">![<span class="string">图片</span>](<span class="link">https://s2.ax1x.com/2019/09/21/nvLK0S.jpg</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">点击跳转到百度</a></p><p><img src="https://s2.ax1x.com/2019/09/21/nvLK0S.jpg" alt="图片"></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>Markdown支持有序列表和无序列表</p><ul><li>有序列表使用<code>*</code>、<code>+</code>或<code>-</code>标识</li><li>有序列表使用数字加<code>.</code>标识</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>黄瓜</span><br><span class="line"><span class="bullet">* </span>玉米</span><br><span class="line"><span class="bullet">* </span>茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>黄瓜</span><br><span class="line"><span class="bullet">+ </span>玉米</span><br><span class="line"><span class="bullet">+ </span>茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>黄瓜</span><br><span class="line"><span class="bullet">- </span>玉米</span><br><span class="line"><span class="bullet">- </span>茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>黄瓜</span><br><span class="line"><span class="bullet">2. </span>玉米</span><br><span class="line"><span class="bullet">3. </span>茄子</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ol><li>黄瓜</li><li>玉米</li><li>茄子</li></ol><p>如果在列表中包含多个段落，为保证渲染正常，*与段落首字母之间必须保留四个空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*    </span>段落</span><br><span class="line"></span><br><span class="line"><span class="code"> 小段</span></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><p>段落</p><p>小段</p></li></ul><p>如果在列表中加入区块引用，区块引用标记符也需要索引4个空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>段落</span><br><span class="line"><span class="code">&gt; 区块标记</span></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><p>段落</p><blockquote><p>区块标记</p></blockquote></li></ul><h1 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h1><p>Markdown比较流行的一个重要原因，就是它能轻松漂亮地插入代码。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内代码：<span class="code">`script`</span>。</span><br><span class="line">插入一整段：</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>这是一整段代码<br>​<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">行内代码：`script`。</span><br><span class="line">插入一整段：</span><br></pre></td></tr></table></figure></p><p>这是一整段代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分割线</span></span><br><span class="line"></span><br><span class="line"><span class="string">有时候，为了排版漂亮，可能会加入分割线。使用三个以上的`*`或`-`。</span></span><br><span class="line"></span><br><span class="line"><span class="string">```markdown</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>效果：</p><hr><hr><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>如果文字要添加删除线，只需要在文字两端加上两层波浪线<code>~~</code>即可</p><p>效果：</p><p><del>删除线</del></p><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p>下划线通过<code>html</code>的<code>&lt;u&gt;</code>来实现</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><p><u>下划线</u></p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>对文字进行强调，<code>*</code>或者<code>_</code>包裹即可。一层是斜体，两层是加粗。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这里是斜体*</span></span><br><span class="line"><span class="emphasis">_这里是斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这里是加粗**</span></span><br><span class="line"><span class="strong">__这里是加粗__</span></span><br></pre></td></tr></table></figure><p><em>这里是斜体</em><br><em>这里是斜体</em></p><p><strong>这里是加粗</strong><br>__这里是加粗</p><h1 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h1><p><code>:---</code>代表左对齐 <code>:---:</code>代表居中 <code>---:</code>代表右对齐</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">:---|:---:|---:</span><br><span class="line">项目|项目|项目</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td align="left">项目</td><td align="center">项目</td><td align="right">项目</td></tr></tbody></table><h1 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h1><p>Markdown使用反斜杠<code>\</code>转义特殊字符</p><p>特殊字符：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+   </span>加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><h1 id="支持HTML元素"><a href="#支持HTML元素" class="headerlink" title="支持HTML元素"></a>支持HTML元素</h1><p>目前支持的HTML元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等。如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure><p>效果：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p>最后流程图暂时不学习了。。。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的第二天</title>
      <link href="/%E5%AD%A6%E4%B9%A0/js%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/%E5%AD%A6%E4%B9%A0/js%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第二天主要学习了运算符、内置对象、流程控制以及类型转换。</p><p>应用方面有：标题上新消息的闪动、表格隔行变色、全选反选。</p><a id="more"></a><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符中需要注意的是 <code>+</code> 号，它不仅可以进行加法运算，还可以进行字符串拼接。</p><blockquote><p>两边都为数值的时候，进行加法运算；</p><p>任意一边是字符串，进行字符串拼接。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span> + <span class="number">100</span>); <span class="comment">// 200 加法运算</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span> + <span class="string">'100'</span>); <span class="comment">// 100100 字符串拼接</span></span><br></pre></td></tr></table></figure><p>另外就是数值型中的NaN。</p><blockquote><p><code>NaN</code> 不是一个数字的数值型 所有的<code>NaN</code>参与运算，结果一定是<code>NaN</code>。同时它也是js里面唯一一个自己都不等于自己的数。判断是否是NaN需要使用<code>isNaN()</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> + <span class="number">100</span>); <span class="comment">// NaN 加法运算</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> + <span class="string">'100'</span>); <span class="comment">// NaN100 字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NaN</span> == <span class="literal">NaN</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'相等'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'不相等'</span>);</span><br><span class="line">&#125; <span class="comment">// 不相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'是NaN'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'不是NaN'</span>);</span><br><span class="line">&#125; <span class="comment">// 是NaN</span></span><br></pre></td></tr></table></figure><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>逗号运算符用来同时声明变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b,c; <span class="comment">// 同时声明3个变量，值都是undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>,y,z = <span class="number">20</span>; <span class="comment">// 同时声明3个变量，各自赋值</span></span><br><span class="line"><span class="keyword">var</span> i = j = <span class="number">30</span>; <span class="comment">// 同时声明2个变量，值都为30</span></span><br></pre></td></tr></table></figure><h2 id="杂项运算符"><a href="#杂项运算符" class="headerlink" title="杂项运算符"></a>杂项运算符</h2><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h3><p>删除对象或者数组里面的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">delete</span> obj[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// [1,2,empty,4]</span></span><br></pre></td></tr></table></figure><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h3><p>检测变量的类型。</p><p>可能返回的值有6个：<code>string/number/boolean/object/undefined/function</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])); <span class="comment">// object    数组返回的是object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="literal">null</span>)); <span class="comment">// object    null返回的是object</span></span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>实例一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obje = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(obje); <span class="comment">// Mon Sep 23 2019 10:01:03 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="in"></a><code>in</code></h3><p>检测对象中是否有某个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="对象成员访问符"><a href="#对象成员访问符" class="headerlink" title="对象成员访问符"></a>对象成员访问符</h2><p>访问数组或者对象里面的元素，需要使用对象成员访问符<code>.</code>或<code>[]</code>。</p><p><code>.</code>和<code>[]</code>的区别：</p><blockquote><p> <code>.</code>号不能解析变量，不能跟数字。</p><p><code>[]</code>可以解析变量，可以放数字。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr<span class="number">.3</span>); <span class="comment">// 报错: missing ) after argument list</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'age'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.key); <span class="comment">// undefined .号后面不能解析变量，会寻找下标为key的键值对，然而该对象中没有下标为key的键值对，所以返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[key]); <span class="comment">// 18 []里面会解析变量，解析成['age'],再去搜索下标为age的键值对。</span></span><br></pre></td></tr></table></figure><p>js里面的数组无法手动制定下标，往数组后面添加数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr[arr.length] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2,3,4,5,hello]</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>i=1 这是初始条件，只会触发一次；</li><li>i&lt;100 这是判断条件，满足就继续循环，不满足就退出循环</li><li>i++ 这是每次循环后递增条件，每次循环后变量i都会+1</li><li>循环顺序：i=1 =&gt; i&lt;100成立 =&gt; 循环体 =&gt; i++ =&gt; i&lt;100成立 =&gt; 循环体 =&gt;…=&gt;i&lt;100不成立 =&gt; 退出循环</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a><code>while</code>循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">100</span>) &#123;</span><br><span class="line"><span class="comment">// 循环体</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环内变量<code>i</code>不断自增，知道不满足<code>while</code>条件，退出循环。</p><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do-while 循环"></a><code>do-while</code> 循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">// 循环体</span></span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><code>do-while</code>循环会至少执行1次，而<code>while</code>和<code>for</code>循环可能一次都不会执行</p><h3 id="fo-in循环"><a href="#fo-in循环" class="headerlink" title="fo-in循环"></a><code>fo-in</code>循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>;age:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'下标'</span>+key+<span class="string">'的值是：'</span>+obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for-in</code>可以把一个对象的所有属性依次循环出来</p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="if-else判断"><a href="#if-else判断" class="headerlink" title="if-else判断"></a><code>if-else</code>判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">21</span></span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="string">'是的2倍数'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="string">'是的3倍数'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="string">'既不是2的倍数，也不是3的倍数'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意的是如果某个条件成立，则后续就不再继续判断了。因此判断语句的顺序非常重要，一般将可能性更高的放在前面。</p><h3 id="switch-case判断"><a href="#switch-case判断" class="headerlink" title="switch-case判断"></a><code>switch-case</code>判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 使用的是 === 判断</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'一'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'二'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'漏网之鱼'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><ul><li><code>Number()</code> 转换为数值，在自动类型转换的时候调用</li><li><code>parseInt()</code> 转换为整数</li><li><code>parseFloat()</code> 转换为浮点数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">'100.2px'</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'100.2px'</span>)); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">'100.2px'</span>)); <span class="comment">// 100.2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">false</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><code>String()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">false</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p><code>Boolean()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">''</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">'0'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="【新消息】闪动"><a href="#【新消息】闪动" class="headerlink" title="【新消息】闪动"></a>【新消息】闪动</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过设置定时器循环显示【新消息】和【　　　】。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title == <span class="string">'【新消息】'</span> ? <span class="built_in">document</span>.title = <span class="string">'【新消息】'</span> : <span class="built_in">document</span>.title = <span class="string">'【　　　】'</span>;</span><br><span class="line">&#125;, <span class="number">500</span>); <span class="comment">// 0.5秒闪动一次</span></span><br></pre></td></tr></table></figure><h2 id="循环输出表格并隔行变色"><a href="#循环输出表格并隔行变色" class="headerlink" title="循环输出表格并隔行变色"></a>循环输出表格并隔行变色</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><code>for</code>循环<code>document.write()</code>输出表格<code>html</code>代码</li><li>通过标签名找到所有<code>tr</code>的对象</li><li>循环判断并修改样式</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;table border width="500"&gt;'</span>);</span><br><span class="line"><span class="comment">// 循环输出行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;tr&gt;'</span>);</span><br><span class="line">    <span class="comment">// 循环输出单元格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;td&gt;123&lt;/td&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;/tr&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;/table&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过标签名找对象 找到的一定是一个数组，需要通过下标才能选中单个对象</span></span><br><span class="line"><span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'tr'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trs.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        trs[i].style.background = <span class="string">'lightblue'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复选框的全选和反选"><a href="#复选框的全选和反选" class="headerlink" title="复选框的全选和反选"></a>复选框的全选和反选</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过修改样式里面<code>checked</code>的值从而修改复选框的状态</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>##############<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>##############<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>##############<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"check(true)"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"check(false)"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"check('invert')"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">flag</span>)</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (flag == <span class="string">'invert'</span>) &#123;</span></span><br><span class="line">                inputs[i].checked = !inputs[i].checked;</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                inputs[i].checked = flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>() <span class="comment">// 检查是否是NaN</span></span><br><span class="line"><span class="keyword">delete</span> <span class="comment">// 删除对象或者数组里面的元素</span></span><br><span class="line"><span class="comment">// 获取年月日时分秒</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">time.getFullYear(); <span class="comment">// 年</span></span><br><span class="line">time.getMonth();    <span class="comment">// 月</span></span><br><span class="line">time.getDate();     <span class="comment">// 日</span></span><br><span class="line">time.getHours();    <span class="comment">// 时</span></span><br><span class="line">time.getMinutes();  <span class="comment">// 分</span></span><br><span class="line">time.getSeconds();  <span class="comment">// 秒</span></span><br><span class="line">time.getTime();     <span class="comment">// 获取时间戳</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'标签名'</span>); <span class="comment">// 通过标签名找对象</span></span><br><span class="line"><span class="built_in">Number</span>(); <span class="comment">// 强制转换为数值型</span></span><br><span class="line"><span class="built_in">parseInt</span>(); <span class="comment">// 强制转换为整数</span></span><br><span class="line"><span class="built_in">parseFloat</span>(); <span class="comment">// 强制转换为浮点数</span></span><br><span class="line"><span class="built_in">String</span>(); <span class="comment">// 强制转换为字符串</span></span><br><span class="line"><span class="built_in">Boolean</span>(); <span class="comment">// 强制转换为布尔型</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的第一天</title>
      <link href="/%E5%AD%A6%E4%B9%A0/js%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/%E5%AD%A6%E4%B9%A0/js%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>揭开js的神秘面纱。</p><p>了解了js的历史、书写位置、调试方式、数据类型、执行顺序。</p><a id="more"></a><h2 id="JavaScript-的简介和历史"><a href="#JavaScript-的简介和历史" class="headerlink" title="JavaScript 的简介和历史"></a>JavaScript 的简介和历史</h2><p>简单地说，JavaScript是一种运行在浏览器中的解释型的变成语言。是世界上最流行的脚本语言。</p><p>1995年，当时的网景公司希望能够在静态HTML页面上添加一些动态效果，于是Brendan Eich 在两周之内设计出了JavaScript语言。</p><p>Script是脚本的意思，而前面的 Java是因为当时Java语言非常火，蹭一下热度，实际上JavaScript和Java没有关系。</p><p>网景公司的对手微软看到JavaScript这么好用，又不好意思直接使用对手的产品，于是模仿开发了JScript。</p><p>但两者之间的差异苦了当时的程序员，于是ECMA（欧洲计算机制造商协会）定制了标准，被称为ECMAScript。</p><h2 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h2><ol><li>进行数据验证，验证表单的数据是否合法。</li><li>写网页特效，例如：轮播图</li><li>ajax局部刷新，无需重新加载整个网页的情况下，更新部分网页</li><li>各种事件，例如：onclick 单击、onmousemove 鼠标移动</li><li>操作页面上的任何一个元素，对DOM进行操作，修改HTML和CSS</li></ol><h2 id="js的使用方式-书写位置"><a href="#js的使用方式-书写位置" class="headerlink" title="js的使用方式/书写位置"></a>js的使用方式/书写位置</h2><ol><li><p>内嵌式</p><p>理论上js(JavaScript的简称)可以书写在页面的任意位置，使用script标签对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;scritp&gt;</span><br><span class="line">alert(<span class="string">'内嵌式'</span>); <span class="comment">// 弹窗并显示文字：“内嵌式”</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外链式</p><p>用过script标签对的src属性引入外部js文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js文件路径地址"</span>&gt;这里面的所有代码都会被屏蔽&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>行内式</p><p>直接书写在标签身上，是一个简写的事件，又称为事件属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// onclick 单击事件 单击元素会触发后面的js代码</span></span><br><span class="line">&lt;button onclick=<span class="string">"alert('你真的点呀~')"</span>&gt;点我呀&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="js的执行顺序"><a href="#js的执行顺序" class="headerlink" title="js的执行顺序"></a>js的执行顺序</h2><p>js是基于对象的语言，它的运行可以理解为“找对象，改属性”。</p><p>并且js完美的展示了“万事万物皆为对象”的理念。</p><p>注意：由于HTML是从上往下解析，如果将js放在<code>head</code>头部中，当执行js的时候，它所对应的Id元素还未被解析，就会报错并停止js代码的执行。因此，js的外链式应该放在<code>body</code>身体的最后面，内嵌式应该放在所对应的id的元素的后面，目的是先让元素被解析出来，再执行js代码。</p><h2 id="js的调试方式"><a href="#js的调试方式" class="headerlink" title="js的调试方式"></a>js的调试方式</h2><p>如果我们想查看js中某个变量的值，我们会有如下的方法：</p><ol><li><p>弹窗输出，不过弹窗是很讨人厌的，所以一般不用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(demo);</span><br></pre></td></tr></table></figure></li><li><p>控制台打印。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(demo); <span class="comment">// 打印基本数据类型</span></span><br><span class="line"><span class="built_in">console</span>.dir(demo); <span class="comment">// 打印符合类型</span></span><br></pre></td></tr></table></figure></li><li><p>直接输出当页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(demo);</span><br></pre></td></tr></table></figure></li><li><p>开启断点调试，需要打开控制台，右键-检查或者F12</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">debugger</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h2><blockquote><p>基本类型：字符串 <code>string</code> 数值型 <code>number</code> 布尔型 <code>boolean</code> </p><p>复合类型：对象 <code>object</code> 数组 <code>array</code> </p><p>特殊类型： 空 <code>null</code> 未定义 <code>undefined</code> 独一无二 <code>symbol</code>(es6)</p><p>查看数据类型： typeof </p></blockquote><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串"></a>1. 字符串</h3><h4 id="解析字符串"><a href="#解析字符串" class="headerlink" title="解析字符串"></a>解析字符串</h4><p>字符串中单双引号没有区别，都不能解析变量。</p><p>单双引号可以包含对方，包含自己的时候可以用转义字符<code>\</code>来识别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'I\'m "OK".'</span>); <span class="comment">//I'm "OK".</span></span><br></pre></td></tr></table></figure><p>解析变量可以使用`` 或者<code>+</code> 进行拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'bob'</span>; <span class="comment">// var 用于声明变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is name'</span>); <span class="comment">// My name is name单引号不能解析变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"My name is name"</span>); <span class="comment">// My name is name双引号也不能解析变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// My name is bob``解析变量，需要在变量外加$&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is '</span> + name); <span class="comment">// My name is bob js中使用+号作为字符串的拼接符</span></span><br></pre></td></tr></table></figure><h4 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h4><p>获取字符串的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p>获取字符串中指定位置的字符，索引号从0开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]); <span class="comment">// H</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">15</span>]); <span class="comment">// 超过范围不会报错，但会返回undefined</span></span><br></pre></td></tr></table></figure><p>字符串是不可变的，对字符串的索引赋值，不会报错，但也没有任何效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str[<span class="number">0</span>] = <span class="string">'Y'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>字符串的常用方法。注意的是，这些方法不会改变原有字符串的内容，而是返回一个新的字符串</p><p>把字符串全部变为大写 <code>toUpperCase()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()); <span class="comment">// HELLO WORLD</span></span><br></pre></td></tr></table></figure><p>把字符串全部变为小写 <code>toLowerCase()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>搜索指定字符串出现的位置 <code>indexOf()</code> 如果存在返回出现的索引，否则返回-1</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indeOf(<span class="string">'Hello'</span>)); <span class="comment">// 0</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indeOf(<span class="string">'hello'</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>提取指定区间的子字符串 <code>substring()</code></p><p>如果不传第二个值则提取后面所有，有第二个值的时候不包含第二个值的索引，超过最大值不会添加其他，第一个值超过最大长度的情况没看懂，以后补充。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>, <span class="number">4</span>));  <span class="comment">// ell</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>));     <span class="comment">// lo world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">5</span>, <span class="number">15</span>)); <span class="comment">//  world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">15</span>));    <span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="2-数值型"><a href="#2-数值型" class="headerlink" title="2. 数值型"></a>2. 数值型</h3><p>数值型中<code>NaN</code>表示无法计算结果，<code>Infinity</code>表示无限大。</p><p>数值型的计算是将数字转成二进制进行计算再转换成十进制，所以有时候小数的计算是出人意料的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.7</span> + <span class="number">0.1</span>  == <span class="number">0.8</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>0</code>开头的是八进制，<code>0x</code>开头的是十六进制，<code>0b</code>开头的是二进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">011</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x11</span>); <span class="comment">// 17 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h4 id="3-布尔型"><a href="#3-布尔型" class="headerlink" title="3 . 布尔型"></a>3 . 布尔型</h4><p>其他类型转换为布尔型得到<code>false</code>的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数值型：<span class="number">0</span> <span class="number">0.0</span></span><br><span class="line">字符串：<span class="string">''</span></span><br><span class="line">特殊类型： <span class="literal">null</span> <span class="literal">undefined</span></span><br><span class="line">注意的是字符串中 <span class="string">'0'</span>和<span class="string">' '</span>都为真</span><br></pre></td></tr></table></figure><h2 id="应用1-跟随鼠标移动的图片"><a href="#应用1-跟随鼠标移动的图片" class="headerlink" title="应用1.跟随鼠标移动的图片"></a>应用1.跟随鼠标移动的图片</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="移动图片"><a href="#移动图片" class="headerlink" title="移动图片"></a>移动图片</h4><p>​                1. 可以通过改变<code>margin</code>来移动图片</p><p>​                2. 可以定位图片，在通过<code>left</code>和’top’来移动图片</p><h4 id="得到鼠标的坐标"><a href="#得到鼠标的坐标" class="headerlink" title="得到鼠标的坐标"></a>得到鼠标的坐标</h4><p>​                绑定一个鼠标移动事件，再在里面获取鼠标坐标</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">"pic"</span> src=<span class="string">"1.jpg"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 通过id获取元素</span></span><br><span class="line"><span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">'pic'</span>);</span><br><span class="line"><span class="comment">// 给window对象绑定一个鼠标移动事件</span></span><br><span class="line"><span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 获取鼠标的X轴</span></span><br><span class="line"><span class="keyword">var</span> X = e.clientX;</span><br><span class="line"><span class="comment">// 获取鼠标的Y轴</span></span><br><span class="line"><span class="keyword">var</span> Y = e.clientY;</span><br><span class="line"><span class="comment">// 分别修改左外边距和上外边距</span></span><br><span class="line">pic.style.marginLeft = e.clientX + <span class="string">'px'</span>;</span><br><span class="line">pic.style.marginTop = e.clientY + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="应用2-打字机效果"><a href="#应用2-打字机效果" class="headerlink" title="应用2 打字机效果"></a>应用2 打字机效果</h2><p>​    一次性定时器 <code>setTimeout(回调函数, 时间)</code></p><p>​    周期性定时器 <code>setInterval(回调函数, 时间)</code></p><p>​    注意：定时器的时间是毫秒 1秒=1000毫秒</p><p>​    清除一次性定时器 <code>clearTimeout(定时器的返回值)</code></p><p>​    清除周期性定时器<code>clearInterval(定时器的返回值)</code></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>先设置一段需要打印的文字，然后通过<code>substring</code>一个一个地提取文字，将提取出来的文字显示在固定的地方，形成打字机效果。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"p"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 通过id获取元素</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">'p'</span>);</span><br><span class="line"><span class="comment">// 设置需要显示的文字</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'生活是一种绵延不绝的渴望，渴望不断上升，变得更伟大而高贵。 —— 杜伽尔'</span>;</span><br><span class="line"><span class="comment">// 设置初始值</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 设置定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 提取文字</span></span><br><span class="line"><span class="keyword">var</span> res = str.substring(<span class="number">0</span>, i);</span><br><span class="line"><span class="comment">// 改变p标签的属性</span></span><br><span class="line">p.innerHTML = res;</span><br><span class="line"><span class="comment">// 自增变量i</span></span><br><span class="line">i++;</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">alert()<span class="comment">// 弹窗</span></span><br><span class="line"><span class="built_in">console</span>.log()</span><br><span class="line"><span class="built_in">console</span>.dir() <span class="comment">// 控制台打印</span></span><br><span class="line"><span class="built_in">document</span>.write() <span class="comment">// 页面书写</span></span><br><span class="line"><span class="built_in">document</span>.getElementById() <span class="comment">// 通过id获取元素</span></span><br><span class="line"><span class="keyword">var</span> <span class="comment">// 声明变量</span></span><br><span class="line">innerHTML <span class="comment">// 标签对中间的文本，只有标签对才有</span></span><br><span class="line"><span class="keyword">debugger</span> <span class="comment">// 断点调试</span></span><br><span class="line">onmousemove <span class="comment">// 鼠标移动事件</span></span><br><span class="line">clientX <span class="comment">// 鼠标X轴</span></span><br><span class="line">clientY <span class="comment">// 鼠标Y轴</span></span><br><span class="line">typeOf  <span class="comment">// 获取数据类型</span></span><br><span class="line">setTimeout(回调函数, 事件) <span class="comment">// 一次性定时器 时间单位：毫秒</span></span><br><span class="line">setInterval(回调函数, 事件) <span class="comment">// 周期性定时器</span></span><br><span class="line">clearTimeout(定时器的返回值)  <span class="comment">// 清除一次性定时器</span></span><br><span class="line">clearInterval(定时器的返回值)  <span class="comment">// 清除周期性定时器</span></span><br><span class="line">substring(开始索引[, 结束索引]) <span class="comment">// 提取指定区间的子字符串</span></span><br><span class="line">toUpperCase() <span class="comment">// 将字符串改为大写</span></span><br><span class="line">toLowerCase() <span class="comment">// 将字符串改为小写</span></span><br><span class="line">indexOf() <span class="comment">// 查询是否存在子字符串</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/%E5%B7%A5%E5%85%B7/my-first-blog/"/>
      <url>/%E5%B7%A5%E5%85%B7/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p>今天利用来之不易的时间学习了使用hexo-github建立博客，根本目的是用来记录自己的学习情况。</p><p>第一篇博客用来说明hexo的基本使用，方便我今后查看。</p><a id="more"></a><table><thead><tr><th align="left">文件/文件夹</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">_config.yml</td><td align="left">配置文件</td></tr><tr><td align="left">public</td><td align="left">生成的静态文件，这个目录最终会发布到服务器</td></tr><tr><td align="left">scaffolds</td><td align="left">一些通用的markdown模板</td></tr><tr><td align="left">source</td><td align="left">编写的markdown文件， _drafts草稿文件，_posts发表的文章</td></tr><tr><td align="left">themes</td><td align="left">博客的模板</td></tr></tbody></table><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><ol><li><p>使用命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>[layout]&lt;title&gt;</span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>"post title with whitespace<span class="string">"</span></span><br></pre></td></tr></table></figure></li><li><p>直接在_drafts新建草稿，在_posts新建发布文章。顶部的相关描述：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">说明</span> <span class="string">//</span> <span class="string">文章页面上显示名称</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-9</span><span class="bullet">-17</span> <span class="number">18</span><span class="string">:18:18//</span> <span class="string">文章生成时间</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">默认分类</span> <span class="string">//</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">//</span> <span class="string">开启文章的评论功能</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[tag1,tag2]</span> <span class="string">//文章标签，可空</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">//附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></span><br><span class="line"><span class="attr">top:</span> <span class="string">//</span> <span class="string">置顶</span> <span class="string">按数字从小到大排序</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">以下是正文</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> hexo g <span class="comment">// 生成静态文件</span></span><br><span class="line"><span class="symbol">$</span> hexo s <span class="comment">// 启动服务器</span></span><br><span class="line"><span class="symbol">$</span> hexo p <span class="comment">// 发表草稿</span></span><br><span class="line"><span class="symbol">$</span> hexo d <span class="comment">// 部署网站</span></span><br><span class="line"><span class="symbol">$</span> hexo clean <span class="comment">// 清除缓存文件和已生成的静态文件</span></span><br><span class="line"><span class="symbol">$</span> hexo g -d <span class="comment">// 完成后部署</span></span><br></pre></td></tr></table></figure><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="引用块-1"><a href="#引用块-1" class="headerlink" title="引用块"></a>引用块</h3><p>在文章中插入代码</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock <span class="string">[title]</span> <span class="string">[lang:language]</span> <span class="string">[url]</span> <span class="string">[link text]</span> %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>在文章中插入指定大小的图片</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] <span class="string">"title text 'alt text'"</span> %&#125;</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>在文章中插入链接，并自动给外部链接添加target=”_blank”属性</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><h3 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h3><p>在文章中使用<code>&lt;!-- more --&gt;</code>，那么前面的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
