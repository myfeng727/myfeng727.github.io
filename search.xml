<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript的学习日记12</title>
      <link href="/Javascript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B012/"/>
      <url>/Javascript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B012/</url>
      
        <content type="html"><![CDATA[<p>第十二天主要学习用 jQuery 写了四个实例：</p><blockquote><ul><li>全选、全不选和反选</li><li>轮播图</li><li>ajax</li><li>登录和注册页面</li></ul></blockquote><a id="more"></a><h2 id="全选、全不选和反选"><a href="#全选、全不选和反选" class="headerlink" title="全选、全不选和反选"></a>全选、全不选和反选</h2><h3 id="attr-和prop-的区别"><a href="#attr-和prop-的区别" class="headerlink" title="attr 和prop 的区别"></a>attr 和prop 的区别</h3><blockquote><p>attr</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 轮播图 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记11</title>
      <link href="/JavaScript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B011/"/>
      <url>/JavaScript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B011/</url>
      
        <content type="html"><![CDATA[<p>第十一天学习内容：</p><blockquote><ul><li><p>jQuery 的文档处理</p></li><li><p>jQuery 的事件</p></li><li><p>jQuery 的属性</p></li><li><p>jQuery 的效果</p></li><li><p>jQuery 的事件对象</p></li><li><p>jQuery 的筛选</p></li></ul></blockquote><a id="more"></a><h2 id="jQuery-的文档处理"><a href="#jQuery-的文档处理" class="headerlink" title="jQuery 的文档处理"></a>jQuery 的文档处理</h2><h3 id="内部插入"><a href="#内部插入" class="headerlink" title="内部插入"></a>内部插入</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>append()</td><td>向每个匹配的元素内部追加内容</td></tr><tr><td>appendTo()</td><td>把所有匹配的元素追加到指定的元素中</td></tr><tr><td>prepend()</td><td>向每个匹配的元素内部前置内容</td></tr><tr><td>prependTo()</td><td>把所有匹配的元素前置到指定的元素中</td></tr></tbody></table><h3 id="外部插入"><a href="#外部插入" class="headerlink" title="外部插入"></a>外部插入</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>after()</td><td>在每个匹配的元素之后插入内容</td></tr><tr><td>before()</td><td>在每个匹配的元素之前插入内容</td></tr><tr><td>insertAfter()</td><td>把所有匹配的元素插入指定的元素的后面</td></tr><tr><td>insertBefore()</td><td>把所有匹配的元素插入指定的元素的前面</td></tr></tbody></table><h3 id="包裹"><a href="#包裹" class="headerlink" title="包裹"></a>包裹</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>wrap()</td><td>把所有匹配的元素用指定的元素包裹起来</td></tr><tr><td>unwrap()</td><td>匹配的元素会在 DOM 结构上移出他们的父元素</td></tr><tr><td>wrapAll()</td><td>把所有匹配的元素用单个元素包裹起来</td></tr><tr><td>wrapInner()</td><td>将每个匹配的元素的字内容用指定的元素包裹起来</td></tr></tbody></table><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>replaceWith()</td><td>将所有匹配的元素替换成指定的元素</td></tr><tr><td>replaceAll()</td><td>把匹配的元素替换掉所有指定的元素</td></tr></tbody></table><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>empty()</td><td>删除匹配的元素中所有的子节点</td></tr><tr><td>remove()</td><td>从 DOM 中删除所有匹配的元素（jQuery对象保留，不保留所绑定的事件、附加的数据）</td></tr><tr><td>detach()</td><td>从 DOM 中删除所有匹配的元素 （jQuery对象保留，保留所绑定的事件、附加的数据）</td></tr></tbody></table><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>clone()</td><td>克隆匹配的元素并且选中这些克隆的副本。（true/false 指示事件处理函数是否会被复制）</td></tr></tbody></table><h2 id="jQuery-的事件"><a href="#jQuery-的事件" class="headerlink" title="jQuery 的事件"></a>jQuery 的事件</h2><h3 id="页面载入"><a href="#页面载入" class="headerlink" title="页面载入"></a>页面载入</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>read()</td><td>当 DOM 载入就绪时绑定一个函数</td></tr></tbody></table><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>on(eve,[sel],[data],fn)</td><td>在匹配的元素上绑定一个或多个事件的事件处理函数</td></tr><tr><td>off(eve,[sel],[fn])</td><td>在匹配的元素上溢出一个或多个事件的事件处理函数</td></tr><tr><td>one(type,[data],fn)</td><td>为每一个匹配元素的特定事件绑定一个一次性的事件处理函数</td></tr><tr><td>trigger(type,[data])</td><td>在每一个匹配的元素上触发某类事件</td></tr><tr><td>triggerHandler(type,[data])</td><td>这个特别的方法将会触发指定的事件类型上所有绑定的处理函数。但不会执行浏览器默认动作，也不会产生事件冒泡</td></tr></tbody></table><h3 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>hover([over,]out)</td><td>当鼠标移动到匹配元素上面时，触发第一个函数；当鼠标移出这个元素时，触发第二个函数</td></tr><tr><td>toggle([spe,][eas,][fn])</td><td>如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的</td></tr></tbody></table><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><blockquote><p>[data] – 传入 data 供函数 fn 处理</p><p>fn – 在每个匹配元素的事件中绑定的处理函数</p></blockquote><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>blur([data,]fn)</td><td>当元素失去焦点时触发</td></tr><tr><td>change([[data,]fn])</td><td>当元素的值发生改变时触发。仅适用于文本域（text field），以及 textarea 和 select 元素。</td></tr><tr><td>click([[data,]fn])</td><td>当单击元素时触发</td></tr><tr><td>dblclick([[data,]fn])</td><td>当双击元素时触发</td></tr><tr><td>focus([[data,]fn])</td><td>当元素获得焦点时触发</td></tr><tr><td>focusin([data,]fn)</td><td>当元素获得焦点时触发。跟 focus 事件区别在于，它可以在父元素上检测子元素获取焦点的情况</td></tr><tr><td>focusout([data,]fn)</td><td>当元素失去焦点时触发。跟 blur 事件区别在于，它可以在父元素上检测子元素失去焦点的情况</td></tr><tr><td>keydown([data,]fn)</td><td>当键盘或按钮被按下时触发</td></tr><tr><td>keypress([[data,]fn])</td><td>当键盘或按钮被按下时触发。与 keydown 事件区别于，每插入一个字符，就会发生 keypress 事件</td></tr><tr><td>keyup([[data,]fn])</td><td>当按钮被松开时触发</td></tr><tr><td>mousedown([[data,]fn])</td><td>当鼠标指针移动到元素上方。并按下鼠标按键时触发，与 click 事件区别在于，mousedown 事件仅需要按键被按下，而不需要松开即可触发</td></tr><tr><td>mouseenter([[data,]fn])</td><td>当鼠标指针穿过元素时触发。与 mouseover 事件区别于，穿过子元素不会触发</td></tr><tr><td>mouseleave([[data,]fn])</td><td>当鼠标指针离开元素时触发。与 mouseout 事件区别于，离开子元素不会触发</td></tr><tr><td>mousemove([[data,]fn])</td><td>当鼠标指针在元素中移动时触发</td></tr><tr><td>mouseout([[data,]fn])</td><td>当鼠标指针从元素上移开时触发。与 mouseleave 事件区别于，离开子元素会触发</td></tr><tr><td>mouseover([[data,]fn])</td><td>当鼠标指针位于元素上方时触发。与 mouseenter 事件区别于，穿过子元素会触发</td></tr><tr><td>mouseup([[data,]fn])</td><td>当在元素上放松鼠标按键时触发。与 click 事件区别于，mouseup 事件仅需要放松按键</td></tr><tr><td>resize([[data,]fn])</td><td>当调整浏览器窗口的大小时触发</td></tr><tr><td>scroll([[data,]fn])</td><td>当用户滚动元素时触发。适用于所有可滚动的元素和 window 对象（浏览器窗口）</td></tr><tr><td>select([[data,]fn])</td><td>当 textarea 或文本类型的 input 元素中的文本被选择时触发</td></tr><tr><td>submit([[data,]fn])</td><td>当提交表单时触发。只适用于表单元素</td></tr></tbody></table><h2 id="jQuery-的属性"><a href="#jQuery-的属性" class="headerlink" title="jQuery 的属性"></a>jQuery 的属性</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>attr(name|pro|key,val|fn)</td><td>设置或返回被选元素的属性值</td></tr><tr><td>removeAttr(name)</td><td>从每一个匹配的元素中删除一个属性</td></tr><tr><td>prop(n|p|k,v|f)</td><td>获取在匹配的元素集中的第一个元素的属性值</td></tr><tr><td>removeProp(name)</td><td>删除有 prop 方法设置的属性集</td></tr></tbody></table><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>addClass(class|fn)</td><td>为每个匹配的元素添加指定的类名</td></tr><tr><td>removeClass([class|fn])</td><td>从所有匹配的元素中删除全部或指定的类</td></tr><tr><td>toggleClass(class|fn[,sw])</td><td>如果存在就删除一个类；不存在就天剑一个类</td></tr></tbody></table><h3 id="HTML-代码-文本-值"><a href="#HTML-代码-文本-值" class="headerlink" title="HTML 代码/文本/值"></a>HTML 代码/文本/值</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>html([val|fn])</td><td>取得第一个匹配元素的 html 内容</td></tr><tr><td>text([val|fn])</td><td>取得所有匹配元素的内容</td></tr><tr><td>var([val|fn|arr])</td><td>获取匹配元素的当前值</td></tr></tbody></table><h2 id="jQuery-的效果"><a href="#jQuery-的效果" class="headerlink" title="jQuery 的效果"></a>jQuery 的效果</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>show([s[,e][,fn]])</td><td>显示隐藏的元素</td></tr><tr><td>hide([s[,e][,fn]])</td><td>隐藏显示的元素</td></tr><tr><td>toggle([s[,e][,fn]])</td><td>如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的</td></tr></tbody></table><h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>slideDown([s][,e][,fn])</td><td>通过高度变化（向下增大）来动态地显示所有匹配的元素</td></tr><tr><td>slideUp([s][,e][,fn])</td><td>通过高度变化（向上减小）来动态地显示所有匹配的元素</td></tr><tr><td>slideToggle([s][,e][,fn])</td><td></td></tr></tbody></table><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>fadeIn([s][,e][,fn])</td><td>通过不透明度的变化来实现所有匹配元素的淡入效果</td></tr><tr><td>fadeOut([s][,e][,fn])</td><td>通过不透明度的变化来实现所有匹配元素的淡出效果</td></tr><tr><td>fadeTo([s,]o[,e][,fn])</td><td>把所有匹配元素的不透明度以渐进方式调整到指定的不透明度</td></tr><tr><td>fadeToggle([s][,e][,fn])</td><td></td></tr></tbody></table><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>animate(p,[s][,e][,fn])</td><td>用于创建自定义动画的函数</td></tr><tr><td>stop([c][,j])</td><td>停止所有在指定元素上正在运行的动画</td></tr><tr><td>delay(d[,q])</td><td>设置一个延时来推迟执行队列中之后的项目</td></tr><tr><td>finish([queue])</td><td>停止当前正在运行的动画，删除所有排队的动画，并完成匹配元素所有的动画</td></tr></tbody></table><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><table><thead><tr><th>属性</th><th>概述</th></tr></thead><tbody><tr><td>jQuery.fx.off</td><td>关闭页面上所有的动画</td></tr></tbody></table><h2 id="jQuery-的事件对象"><a href="#jQuery-的事件对象" class="headerlink" title="jQuery 的事件对象"></a>jQuery 的事件对象</h2><table><thead><tr><th>属性 / 方法</th><th>概述</th></tr></thead><tbody><tr><td>eve.currentTarget</td><td>在事件冒泡阶段中的当前 DOM 元素</td></tr><tr><td>eve.data</td><td>当前执行的处理器被绑定的时候，包含可选的数据传递给 jQuery.fn.bind</td></tr><tr><td>eve.delegateTarget</td><td>当 currently-called 的 jQuery 事件处理程序附加元素</td></tr><tr><td>eve.isDefaultPrevented()</td><td>根据事件对象中是否调用过 event.preventDefalut() 方法来返回一个布尔值</td></tr><tr><td>eve.isPropagationStopped()</td><td>根据事件对象中是否调用过 event.stopPropagation() 方法来返回一个布尔值</td></tr><tr><td>eve.namespace</td><td>当事件被触发时此属性包含指定的命名空间</td></tr><tr><td>eve.pageX</td><td>鼠标相对与文档的左边缘的位置</td></tr><tr><td>eve.pageY</td><td>鼠标相对与文档的顶部边缘的位置</td></tr><tr><td>eve.preventDefault()</td><td>阻止默认事件行为的触发</td></tr><tr><td>eve.relatedTarget</td><td>在事件中设置的其它任何 DOM 元素</td></tr><tr><td>eve.result</td><td>包含了当前事件最后触发的那个处理函数的返回值，除非值是 undefined</td></tr><tr><td>eve.stoplmmediatePropagation()</td><td>阻止剩余的事件处理函数执行并且防止事件冒泡到 DOM 树上</td></tr><tr><td>eve.stopPropagation()</td><td>防止事件冒泡到 DOM 树上，也就是不触发的任何前辈元素上的事件处理函数</td></tr><tr><td>eve.target</td><td>最初触发事件的 DOM 元素</td></tr><tr><td>eve.timeStamp</td><td>返回事件触发时的毫秒数的时间戳</td></tr><tr><td>eve.type</td><td>返回事件类型</td></tr><tr><td>eve.which</td><td>返回按键的 keyCode</td></tr></tbody></table><h2 id="jQuery-的筛选"><a href="#jQuery-的筛选" class="headerlink" title="jQuery 的筛选"></a>jQuery 的筛选</h2><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>eq(index|-index)</td><td>获取当前链式操作中第 N 个 jQuery 对象。</td></tr><tr><td>first()</td><td>获取第一个元素</td></tr><tr><td>last()</td><td>获取最后一个元素</td></tr><tr><td>hasClass(class)</td><td>检查当前的元素是否含有某个特定的类</td></tr><tr><td>filter(expr|obj|ele|fn)</td><td>筛选出于指定表达式匹配的元素集合</td></tr><tr><td>is(expr|obj|ele|fn)</td><td>根据选择器、DOM 元素或jQuery 对象来检测匹配元素集合，如果其中至少有一个元素符合这个给定的表达式就返回 true</td></tr><tr><td>map(callback)</td><td>将一组元素转换成其他数组</td></tr><tr><td>has(expr|ele)</td><td>保留包含特定后代的元素，去掉那些不含有指定后代的元素</td></tr><tr><td>not(expr|ele|fn)</td><td>从匹配元素的集合中删除与指定表达式匹配的元素</td></tr><tr><td>slice(start,[end])</td><td>选取一个匹配的子集</td></tr></tbody></table><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>children([expr])</td><td>取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合</td></tr><tr><td>closest(e|o|e)</td><td>从元素本身开始，逐级向上级元素匹配，并返回最先匹配的元素</td></tr><tr><td>find(e|o|e)</td><td>搜索所有与指定表达式匹配的元素</td></tr><tr><td>next([expr])</td><td>取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合</td></tr><tr><td>nextAll([expr])</td><td>查找当前元素之后所有的同辈元素</td></tr><tr><td>nextUntil([e|e][,f])</td><td>查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素为止</td></tr><tr><td>offsetParent()</td><td>返回第一个匹配元素用于定位的父节点</td></tr><tr><td>parent([expr])</td><td>取得一个包含所有匹配元素的唯一父元素的元素集合</td></tr><tr><td>parens([expr])</td><td>取得一个包含所有匹配元素的祖先元素的元素集合（不包含根元素）</td></tr><tr><td>parentsUntil([e|e][,f])</td><td>查找当前元素的所有的父辈元素，知道遇到匹配的那个元素为止</td></tr><tr><td>prev([expr])</td><td>取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合</td></tr><tr><td>prevAll([expr])</td><td>查找当前元素之前所有的同辈元素</td></tr><tr><td>prevUntil([e|e][,f])</td><td>查找当前元素之前所有的同辈元素，直到遇到匹配的那个元素为止</td></tr><tr><td>siblings([expr])</td><td>取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合</td></tr></tbody></table><h3 id="串联"><a href="#串联" class="headerlink" title="串联"></a>串联</h3><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>add(e|e|h|o[,c])</td><td>把与表达式匹配的元素添加到 jQuery 对象中</td></tr><tr><td>addBack()</td><td>添加堆栈中元素集合到当前集合</td></tr><tr><td>contents()</td><td>查找匹配元素内部所有的子节点（包括文本节点）</td></tr><tr><td>end()</td><td>回到最近一个“破坏性”操作之前。所谓的“破坏性”就是指任何改变所匹配的 jQuery 元素的操作。</td></tr></tbody></table><p>注：本文内容摘自 <a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">jQuery API中文文档</a> 作者：Shifone</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记10</title>
      <link href="/JavaScript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B010/"/>
      <url>/JavaScript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B010/</url>
      
        <content type="html"><![CDATA[<p>第十天的学习内容：</p><blockquote><ul><li>认识 jQuery</li><li>jQuery 的 CSS 操作</li><li>各种选择器</li><li>模拟jQuery的基本选择器和CSS操作</li></ul></blockquote><a id="more"></a><h2 id="认识-jQuery"><a href="#认识-jQuery" class="headerlink" title="认识 jQuery"></a>认识 jQuery</h2><p>jQuery 是一个 JavaScript 函数库。是第三方开发的工具。</p><p>本次学习所使用的版本：v1.12.4</p><h3 id="下载-jQuery"><a href="#下载-jQuery" class="headerlink" title="下载 jQuery"></a>下载 jQuery</h3><p>每个版本有两种 jQuery 可供下载：</p><ul><li>Production version - 用于实际的网站中，已被精简和压缩。</li><li>Development version - 用于测试和开发，未压缩，是可读的。</li></ul><p>可以从 <a href="https://jquery.com/download/" target="_blank" rel="noopener">jQuery.com</a>下载。</p><h3 id="将-jQuery-添加到网页"><a href="#将-jQuery-添加到网页" class="headerlink" title="将 jQuery 添加到网页"></a>将 jQuery 添加到网页</h3><p>jQuery 是一个 JavaScript 文件，可以使用 &lt;script&gt; 标签来引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h3><p>如果不希望下载并存放 jQuery ，那么也可以通过 CDN （内容分发网络）引用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.12.4.min.js"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">integrity</span>=<span class="string">"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ="</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以从谷歌或微软引用 jQuery：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 谷歌CDN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 微软CDN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想使用其他版本可在下面链接的页面中选择（谷歌需要VPN打开）：</p><p><a href="https://code.jquery.com/" target="_blank" rel="noopener">jQuery CDN</a></p><p><a href="https://developers.google.com/speed/libraries#jquery" target="_blank" rel="noopener">谷歌 CDN</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview#jQuery_Releases_on_the_CDN_0" target="_blank" rel="noopener">微软 CDN</a></p><p>使用谷歌或微软的 jQuery ，有一个很大的优势：</p><blockquote><p>许多用户在访问其他站点时，已经从谷歌或微软加载过 jQuery。所有结果是，当他们访问你的站点时，会从缓存中加载 jQuery，这样可以减少加载时间。同事，大多数 CDN 都可以确保当用户向其请求文件时，会从离用户最近的服务器上返回响应，这样也可以提高加载速度。</p></blockquote><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>jQuery 的使用十分简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).action();</span><br></pre></td></tr></table></figure><blockquote><p>$ 美元符号定义 jQuery</p><p>selector 选择器查询和查找 HTML 元素</p><p>action() 执行对元素的操作</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'p'</span>).hide(); <span class="comment">// 隐藏所有段落</span></span><br><span class="line">$(<span class="string">'.test'</span>).hide(); <span class="comment">// 隐藏所有class值是test的元素</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><p>选择器允许对元素组或单个元素进行操作。</p><p>学习 jQuery 选择器的关键点是如何准确地选取希望应用效果的元素。</p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 id 来选取元素</span></span><br><span class="line">$(<span class="string">'#idName'</span>); </span><br><span class="line"><span class="comment">// 通过 class 来选取元素</span></span><br><span class="line">$(<span class="string">'.className'</span>); </span><br><span class="line"><span class="comment">// 通过标签名来选取元素</span></span><br><span class="line">$(<span class="string">'tagName'</span>);</span><br><span class="line"><span class="comment">// 通过通配符来选择所有元素</span></span><br><span class="line">$(<span class="string">'*'</span>);</span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取存在指定属性的元素</span></span><br><span class="line">$(<span class="string">'div[title]'</span>);</span><br><span class="line"><span class="comment">// 选取指定属性的值等于指定的值的元素</span></span><br><span class="line">$(<span class="string">'div[title=123]'</span>);</span><br><span class="line"><span class="comment">// 选取指定属性的值不等于指定的值的元素</span></span><br><span class="line">$(<span class="string">'div[title!=123]'</span>);</span><br><span class="line"><span class="comment">// 选取指定的属性的值以指定的值开头的元素</span></span><br><span class="line">$(<span class="string">'div[title^=1]'</span>);</span><br><span class="line"><span class="comment">// 选取指定的属性的值以指定的值结尾的元素</span></span><br><span class="line">$(<span class="string">'div[title$=3]'</span>);</span><br><span class="line"><span class="comment">// 选取指定的属性的值存在指定的值的元素（包括首尾）</span></span><br><span class="line">$(<span class="string">'div[title*=2]'</span>);</span><br><span class="line"><span class="comment">// 选取含有多个指定属性的元素</span></span><br><span class="line">$(<span class="string">'div[title=123][alt]'</span>);</span><br></pre></td></tr></table></figure><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取指定元素包含的所有指定的元素（选取所有后代）</span></span><br><span class="line">$(<span class="string">'div p'</span>);</span><br><span class="line"><span class="comment">// 选取指定元素包含的下一级的指定的元素（选取所有儿子）</span></span><br><span class="line">$(<span class="string">'div &gt; p'</span>);</span><br><span class="line"><span class="comment">// 选取指定元素相邻的、紧凑着的指定元素（选取下一个亲弟弟）</span></span><br><span class="line">$(<span class="string">'div + p'</span>);</span><br><span class="line"><span class="comment">// 选取指定元素同级的后面的指定元素（选取所有的亲弟弟）</span></span><br><span class="line">$(<span class="string">'div ~ p'</span>);</span><br></pre></td></tr></table></figure><h3 id="内容选择器"><a href="#内容选择器" class="headerlink" title="内容选择器"></a>内容选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取拥有指定的文本的元素</span></span><br><span class="line">$(<span class="string">':contains("文本")'</span>);</span><br><span class="line"><span class="comment">// 选取没有内容的元素</span></span><br><span class="line">$(<span class="string">':empty'</span>);</span><br><span class="line"><span class="comment">// 选取包含指定元素的元素</span></span><br><span class="line">$(<span class="string">':has(p)'</span>);</span><br><span class="line"><span class="comment">// 选取有内容荣的元素</span></span><br><span class="line">$(<span class="string">':parent'</span>);</span><br></pre></td></tr></table></figure><h3 id="可见性选择器"><a href="#可见性选择器" class="headerlink" title="可见性选择器"></a>可见性选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取有所隐藏的元素</span></span><br><span class="line">$(<span class="string">':hidden'</span>);</span><br><span class="line"><span class="comment">// 选取所有课件的元素</span></span><br><span class="line">$(<span class="string">':visible'</span>);</span><br></pre></td></tr></table></figure><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取第一个元素</span></span><br><span class="line">$(<span class="string">':first'</span>);</span><br><span class="line"><span class="comment">// 选取最后一个元素</span></span><br><span class="line">$(<span class="string">':last'</span>);</span><br><span class="line"><span class="comment">// 选取除了指定元素外所有的元素</span></span><br><span class="line">$(<span class="string">':not(p)'</span>);</span><br><span class="line"><span class="comment">// 选取索引为偶数的元素</span></span><br><span class="line">$(<span class="string">':even'</span>);</span><br><span class="line"><span class="comment">// 选取索引为奇数的元素</span></span><br><span class="line">$(<span class="string">':odd'</span>);</span><br><span class="line"><span class="comment">// 选取指定索引的元素</span></span><br><span class="line">$(<span class="string">':eq(3)'</span>);</span><br><span class="line"><span class="comment">// 选取索引大于指定数的元素</span></span><br><span class="line">$(<span class="string">':gt(3)'</span>);</span><br><span class="line"><span class="comment">// 选取索引小于指定数的元素</span></span><br><span class="line">$(<span class="string">':lt(3)'</span>);</span><br><span class="line"><span class="comment">// 选取 h1~h6 标题标签</span></span><br><span class="line">$(<span class="string">':header'</span>);</span><br></pre></td></tr></table></figure><h3 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取指定位置的子元素</span></span><br><span class="line">$(<span class="string">':nth-child(2)'</span>);</span><br><span class="line"><span class="comment">// 选取第一个子元素</span></span><br><span class="line">$(<span class="string">':first-child'</span>);</span><br><span class="line"><span class="comment">// 选取最后一个子元素</span></span><br><span class="line">$(<span class="string">':last-child'</span>);</span><br><span class="line"><span class="comment">// 选取只有一个元素的元素</span></span><br><span class="line">$(<span class="string">':only-child'</span>);</span><br></pre></td></tr></table></figure><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取选中状态的多选框或单选框</span></span><br><span class="line">$(<span class="string">'form input:checked'</span>);</span><br><span class="line"><span class="comment">// 选取禁用状态的输入框</span></span><br><span class="line">$(<span class="string">'form input:disabled'</span>);</span><br><span class="line"><span class="comment">// 选取启用状态的输入框</span></span><br><span class="line">$(<span class="string">'form input:enabled'</span>);</span><br><span class="line"><span class="comment">// 选取下拉框中选中状态的选项</span></span><br><span class="line">$(<span class="string">'form select option:selected'</span>);</span><br></pre></td></tr></table></figure><h2 id="CSS-操作"><a href="#CSS-操作" class="headerlink" title="CSS 操作"></a>CSS 操作</h2><p>jQuery 中的 CSS 操作可以很简便的改变指定元素的样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ddiv = $(<span class="string">'.myDiv'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置单个 css 样式</span></span><br><span class="line">ddiv.css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br><span class="line"><span class="comment">// 设置多个 css 样式 传入对象</span></span><br><span class="line">ddiv.css(&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'font-size'</span>:<span class="string">'1.5em'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单个 css 样式</span></span><br><span class="line"><span class="built_in">console</span>.dir(ddiv.css(<span class="string">'color'</span>));</span><br><span class="line"><span class="comment">// 获取多个 css 样式 传入数组</span></span><br><span class="line"><span class="built_in">console</span>.dir(ddiv.css([<span class="string">'color'</span>,<span class="string">'font-size'</span>]));</span><br></pre></td></tr></table></figure><p>在示例中，我们选择的可能是多个元素，设置 css 样式会自动遍历设置所有的元素的样式，这种操作被称为<strong>隐式迭代</strong>。</p><h2 id="jQuery原理"><a href="#jQuery原理" class="headerlink" title="jQuery原理"></a>jQuery原理</h2><p>我们知晓了 jQuery 的基本语法以及选择器。现在我们通过使用 JavaScript 代码来模拟<em>基本选择器</em>和<em>CSS操作</em>。</p><p>首先是创建一个函数，函数名为$，形参为选择器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>基本选择器有：* #id .class tag</p><p>可以通过判断第一个字符来确定选择器的类型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取选择器的第一个字符作为标识符</span></span><br><span class="line"><span class="keyword">var</span> mark = selector[<span class="number">0</span>]; <span class="comment">// 或者 var mark = selector.substr(0,1);</span></span><br><span class="line"><span class="comment">// 提取除了第一个字符的内容</span></span><br><span class="line"><span class="keyword">var</span> select = selector.substr(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 因为标识符是已知种类的，所以使用 switch-case 分支来判断</span></span><br><span class="line"><span class="keyword">switch</span> (mar) &#123;</span><br><span class="line">    <span class="comment">// 将可能性高的放在前面</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#'</span>: <span class="comment">// id 选择器</span></span><br><span class="line">        <span class="built_in">console</span>.dir(<span class="built_in">document</span>.getElementById(select));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'.'</span>: <span class="comment">// class 选择器</span></span><br><span class="line">        <span class="built_in">console</span>.dir(<span class="built_in">document</span>.getElementsByClassName(select));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>: <span class="comment">// 通配符选择器</span></span><br><span class="line">        <span class="built_in">console</span>.dir(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 标签选择器</span></span><br><span class="line">        <span class="built_in">console</span>.dir(<span class="built_in">document</span>.getElementsByTagName(selector));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但 id 选择出来的是一个对象，其他选择出来的使对象的集合，为了方便后面的 css 操作，我们需要准备一个数组，将选择出来的对象添加到数组中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的集合</span></span><br><span class="line"><span class="keyword">var</span> collection = &#123;</span><br><span class="line">    coll:[] <span class="comment">// 存所有的 dom 对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (mark) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">            collection.coll.push(<span class="built_in">document</span>.getElementById(select));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'.'</span>:</span><br><span class="line">            collection.coll = <span class="built_in">document</span>.getElementsByClassName(select);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">            collection.coll = <span class="built_in">document</span>.getElementsByTagName(mark);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            collection.coll = <span class="built_in">document</span>.getElementsByTagName(selector);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来是 css 方法（这里只做修改单一样式）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">collection.css = fucntion (name, value) &#123;</span><br><span class="line">    <span class="comment">// 通过循环遍历来对每个对象修改样式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.coll.length; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.coll[i].style[name] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综合得到我们封装的 jQuery 的完整示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 提取选择器的第一个字符作为标识符</span></span><br><span class="line">    <span class="keyword">var</span> mark = selector[<span class="number">0</span>]; <span class="comment">// 或者 var mark = selector.substr(0,1);</span></span><br><span class="line">    <span class="comment">// 提取除了第一个字符的内容</span></span><br><span class="line">    <span class="keyword">var</span> select = selector.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 所有的集合</span></span><br><span class="line">    <span class="keyword">var</span> collection = &#123;</span><br><span class="line">        coll:[] <span class="comment">// 存所有的 dom 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为标识符是已知种类的，所以使用 switch-case 分支来判断</span></span><br><span class="line">    <span class="keyword">switch</span> (mark) &#123;</span><br><span class="line">        <span class="comment">// 可能性大的放在前面</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'#'</span>: <span class="comment">// id 选择器</span></span><br><span class="line">            collection.coll.push(<span class="built_in">document</span>.getElementById(select));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'.'</span>: <span class="comment">// class 选择器</span></span><br><span class="line">            collection.coll = <span class="built_in">document</span>.getElementsByClassName(select);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>: <span class="comment">// 通配符选择器</span></span><br><span class="line">            collection.coll = <span class="built_in">document</span>.getElementsByTagName(mark);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="comment">// 标签选择器</span></span><br><span class="line">            collection.coll = <span class="built_in">document</span>.getElementsByTagName(selector);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    collection.css = fucntion (name, value) &#123;</span><br><span class="line">        <span class="comment">// 通过循环遍历来对每个对象修改样式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.coll.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.coll[i].style[name] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进行链式操作</span></span><br><span class="line">    <span class="keyword">return</span> collection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> jQuery选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记9</title>
      <link href="/JavaScript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B09/"/>
      <url>/JavaScript/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B09/</url>
      
        <content type="html"><![CDATA[<p><small>人的懒惰真难战胜，我又一次败给了它，日记6/7/8以后补。</small></p><p>第九天学习内容:</p><blockquote><ul><li>ajax 基础</li><li>jsonp</li><li>封装 ajax</li></ul></blockquote><a id="more"></a><h2 id="ajax-基础"><a href="#ajax-基础" class="headerlink" title="ajax 基础"></a>ajax 基础</h2><blockquote><p>ajax 是在重新加载整个页面的情况下，与服务器交换数据并更新部分页面的技术。</p></blockquote><h3 id="ajax-步骤"><a href="#ajax-步骤" class="headerlink" title="ajax 步骤"></a>ajax 步骤</h3><p>进行一次 ajax 一般有如下四个步骤：</p><blockquote><ol><li>创建 ajax 对象</li><li>设置请求信息</li><li>提交请求</li><li>绑定事件</li></ol></blockquote><h4 id="创建-ajax-对象"><a href="#创建-ajax-对象" class="headerlink" title="创建 ajax 对象"></a>创建 ajax 对象</h4><p>所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）</p><p>现代浏览器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p>IE 浏览器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> ActiveXObject();</span><br></pre></td></tr></table></figure><p>考虑到兼容性，一般先检查浏览器是否支持 XMLHttpRequset 对象，支持则创建 XMLHttpRequest 对象，否则创建 ActiveXObject 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置请求信息"><a href="#设置请求信息" class="headerlink" title="设置请求信息"></a>设置请求信息</h4><p>用来规定请求的类型、url 以及是否异步处理请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(method, url <span class="keyword">async</span>);</span><br></pre></td></tr></table></figure><blockquote><p>method: 请求的类型 get 或者 post<br>url: 文件在服务器的位置<br>async: true(异步) / false(同步)</p></blockquote><p>如果需要传递参数，可以在 url 中可以通过 ? 传递参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./demo.php?id=1&amp;name=bob'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>如果使用 post 传递的话，如果需要向 HTML 表单哪样 POST 数据，需要设置请求头信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'./demo.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br></pre></td></tr></table></figure><p>异步和同步：</p><blockquote><p>同步可以比作老板自己做某一件事，在结果出来之前是不能做其他事，浏览器就会表现出‘卡死’的状况。</p><p>同步可以比作老板交代员工去做某一件事，在结果出来之前老板也是可以做其他事情。浏览器表现为在等待结果时也可以执行其他脚本。</p></blockquote><h4 id="提交请求"><a href="#提交请求" class="headerlink" title="提交请求"></a>提交请求</h4><p>通过 <code>send()</code>方法将请求发送到服务器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(string)</span><br></pre></td></tr></table></figure><blockquote><p>string: 仅用于 post 请求时传递参数</p></blockquote><p>如果使用 post 传递的话，则需要在 send() 方法里面填写<strong>字符串</strong>参数，完整示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'./demo.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(<span class="string">'id=1&amp;name=bob'</span>);</span><br></pre></td></tr></table></figure><h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><p>当请求发送后，我们需要获取响应结果，使用 responseText 或 responseXML 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse() <span class="comment">// 字符串转为对象</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify() <span class="comment">// 对象转为字符串</span></span><br></pre></td></tr></table></figure><p>但由于常用异步请求，所以我们需要在服务器响应成功并且就绪的情况下拿取响应结果，综合示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>onreadystatechange： 每当 readyState 改变就会调用一次函数</p><p>readyState： 请求的状态</p><blockquote><ul><li>0：请求未初始化</li><li>1：服务器连接已建立</li><li>2：请求已接收</li><li>3：请求处理中</li><li>4：请求已完成，且响应已就绪</li></ul></blockquote><p>status：200: ‘ok’ 404: 未找到页面</p></blockquote><h3 id="完整的-ajax-流程代码"><a href="#完整的-ajax-流程代码" class="headerlink" title="完整的 ajax 流程代码"></a>完整的 ajax 流程代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 ajax 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;      <span class="comment">// 兼容 IE</span></span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();   <span class="comment">// 现代浏览器</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject();    <span class="comment">// IE 浏览器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求信息</span></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./demo.php?id=1&amp;name=bob'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// post</span></span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'./demo.php?id=1&amp;name=bob'</span>, <span class="literal">true</span>); <span class="comment">// post也可以在 url 中传递数据</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>); <span class="comment">// post 需要设置请求头的表单编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// post</span></span><br><span class="line">xhr.send(<span class="string">'id=2&amp;name=tom'</span>);</span><br></pre></td></tr></table></figure><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>ajax 直接请求普通文件存在跨域无权限访问的问题，只要是跨域请求，一律不准。</p><p>web 页面上调用 js 文件时不受跨域的影响（不仅是 js， 凡是拥有 src 属性的标签都拥有跨域的能力，比如&lt;img&gt;,&lt;iframe&gt;）。</p><p>于是可以得出，现阶段向跨域访问数据只有一种可能，那就是在远程服务器上设法把数据装进 js 格式的文件里，供客户端调用和进一步处理。</p><p>恰巧有一种叫做 json 的纯字符数据格式可以简洁的描述复杂数据，json 还被 js 原生支持，所以客户端可以随心所欲的处理这种格式的数据。</p><p>因此，web 客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的 js 格式文件。</p><p>客户端在对 json 文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展示，这种获取远程数据的方式看起来非常像 ajax ，但其实并不一样</p><p>为了便于客户端使用数据，逐渐形成了一种非正式传输协议，称作 jsonp， 该协议的一个要点就是允许用户传递一个 callback 参数给服务端，然后服务端返回数据时会将这个 callback 参数作为函数名来包裹住 json 数据，这样客户端就可以随意定制自己的函数来自动处理返回数据量。</p><h3 id="创建回调函数"><a href="#创建回调函数" class="headerlink" title="创建回调函数"></a>创建回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(data); <span class="comment">// 对数据的处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-script-标签"><a href="#创建-script-标签" class="headerlink" title="创建 script 标签"></a>创建 script 标签</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUserData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建 script 标签用来加载 js</span></span><br><span class="line">    <span class="keyword">var</span> sit = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="comment">// 设置动态 js 文件地址</span></span><br><span class="line">    sit.src = <span class="string">'http://localhost/demo.php'</span>;</span><br><span class="line">    <span class="comment">// 添加到页面中</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(sit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端的处理"><a href="#服务端的处理" class="headerlink" title="服务端的处理"></a>服务端的处理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 模拟得到了需要的数据</span></span><br><span class="line">$data = [</span><br><span class="line">    [<span class="string">'id'</span>=&gt;<span class="number">1</span>,<span class="string">'name'</span>=&gt;<span class="string">'bob'</span>],</span><br><span class="line">    [<span class="string">'id'</span>=&gt;<span class="number">2</span>,<span class="string">'name'</span>=&gt;<span class="string">'tom'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 json 格式转为数据 json_decode()</span></span><br><span class="line"><span class="comment">// 将数据转为 json 格式 json_encode()</span></span><br><span class="line">$json = json_encode($data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'getData(&#123;$json&#125;)'</span>;</span><br></pre></td></tr></table></figure><h2 id="封装-ajax"><a href="#封装-ajax" class="headerlink" title="封装 ajax"></a>封装 ajax</h2><p>由于 ajax 经常使用，并且代码固定，可以将 ajax 封装成一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形参有 地址 类型 使用结果的函数 如果是 post 时传的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, method, func, data=<span class="string">''</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ajax 对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是指请求信息</span></span><br><span class="line">    xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 如果是 post 需要设置请求头信息</span></span><br><span class="line">    <span class="comment">// 通过toUpperCase()方法转为大写再对比，从而原数据不管大小写</span></span><br><span class="line">    <span class="keyword">if</span> (method.toUpperCase() == <span class="string">'POST'</span>) &#123;</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'applicationi/x-www-form-urlencoded'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    xhr.send(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> jsonp </tag>
            
            <tag> 封装ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-git 部署博客</title>
      <link href="/%E5%B7%A5%E5%85%B7/hexo-github/"/>
      <url>/%E5%B7%A5%E5%85%B7/hexo-github/</url>
      
        <content type="html"><![CDATA[<p>今天将电脑主板烧了，只好使用备用的，又要重新搭建hexo，想到后面买电脑后还需要进行搭建，于是将部分步骤记录下来，方便以后的操作。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a></p></li><li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a> <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">国内的下载网站</a></p></li><li><p>谷歌浏览器(账号：<a href="mailto:q929570589@gmail.com" target="_blank" rel="noopener">q929570589@gmail.com</a>)</p></li><li><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 使用 npm 安装 Hexo</p>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>检查本机已存在的 ssh 密钥</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> ~<span class="string">/.</span> ssh</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明是第一次使用 git</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"邮箱地址"</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在：<code>/c/Users/Administrator/.ssh/</code>，用记事本打开<code>id_rsa.pub</code>文件。</p><p>如果提示：bash: cd: too many arguments 则已有 ssh 密钥</p><hr><p>暂时就这些…</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记5</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B05/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<p>第五天的学习内容：</p><blockquote><ul><li>绑定事件的方式</li><li>获取事件对象的方式</li><li>文档事件</li><li>图片事件</li><li>鼠标事件</li></ul></blockquote><a id="more"></a><h2 id="绑定事件的方式"><a href="#绑定事件的方式" class="headerlink" title="绑定事件的方式"></a>绑定事件的方式</h2><h3 id="在DOM元素中直接绑定"><a href="#在DOM元素中直接绑定" class="headerlink" title="在DOM元素中直接绑定"></a>在DOM元素中直接绑定</h3><p>直接在html的标签中添加事件属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"func()"</span> <span class="attr">onclick</span>=<span class="string">"func1()"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;; <span class="comment">// 执行</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span>&#123;&#125;; <span class="comment">// 不执行</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样做有两个缺点：</p><blockquote><ol><li>存在时间差原因，在html元素渲染出来就会触发相应的事件，但有可能还不具备执行条件，如js代码还没下载下来，因此可能会引发错误。</li><li>html和js代码紧密耦合，如果要更换事件，就要改动两个地方：html代码和js代码，非常不利于后期代码的维护。</li></ol></blockquote><h3 id="在js代码中绑定"><a href="#在js代码中绑定" class="headerlink" title="在js代码中绑定"></a>在js代码中绑定</h3><p>将一个函数赋值给一个事件属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line">demo.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 不执行</span></span><br><span class="line">demo.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 执行</span></span><br></pre></td></tr></table></figure><p>这样做的有点是：简单、所有浏览器都支持。</p><p>缺点是：只会执行最后一个事件。</p><h3 id="绑定事件监听函数"><a href="#绑定事件监听函数" class="headerlink" title="绑定事件监听函数"></a>绑定事件监听函数</h3><p><code>addEventListener()</code>添加事件。<code>removeEventListener()</code>删除事件。可以添加多个事件，执行顺序和添加顺序相同。</p><p>两个函数都接受三个参数：</p><blockquote><p>事件名称，注意的是这里没有<code>on</code>，比如单击事件就是<code>click</code>。</p><p>函数名，后面没有<code>()</code>，比如<code>func</code>。</p><p>捕获值，<code>false</code>不捕获/<code>true</code>捕获,默认值<code>false</code>。</p></blockquote><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line">demo.addEventListener(<span class="string">'click'</span>,click1,<span class="literal">false</span>); <span class="comment">// 先执行</span></span><br><span class="line">demo.addEventListener(<span class="string">'click'</span>,click2); <span class="comment">// 后执行</span></span><br></pre></td></tr></table></figure><h2 id="获取事件对象的方式"><a href="#获取事件对象的方式" class="headerlink" title="获取事件对象的方式"></a>获取事件对象的方式</h2><h3 id="直接在事件中使用event对象"><a href="#直接在事件中使用event对象" class="headerlink" title="直接在事件中使用event对象"></a>直接在事件中使用<code>event</code>对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demo.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(event); <span class="comment">// MouseEvent</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用参数e"><a href="#使用参数e" class="headerlink" title="使用参数e"></a>使用参数e</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(e); <span class="comment">// FocusEvent</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档事件"><a href="#文档事件" class="headerlink" title="文档事件"></a>文档事件</h2><h4 id="onload-事件"><a href="#onload-事件" class="headerlink" title="onload 事件"></a>onload 事件</h4><blockquote><p>onload 事件会在页面或图像加载完成后立即发生。</p></blockquote><p>当 js 代码不得已写在 head 头部时，为了保证 js 代码执行不出错，可以等待文档加载完成再执行 js 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// js 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="onunload-事件"><a href="#onunload-事件" class="headerlink" title="onunload 事件"></a>onunload 事件</h4><blockquote><p>onunload 事件在用户退出页面时发生。</p></blockquote><h4 id="onbeforeunload-事件"><a href="#onbeforeunload-事件" class="headerlink" title="onbeforeunload 事件"></a>onbeforeunload 事件</h4><blockquote><p>onbeforeunload 事件在用户退出页面前发生。</p></blockquote><p>一般用来计算用户在该页面停留的时间。</p><h3 id="图片事件"><a href="#图片事件" class="headerlink" title="图片事件"></a>图片事件</h3><h4 id="onerror-事件"><a href="#onerror-事件" class="headerlink" title="onerror 事件"></a>onerror 事件</h4><blockquote><p>onerror 事件会在文档或图像加载过程中发生错误时触发。</p></blockquote><p>图片加载失败显示默认图片：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pic.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pic.src = <span class="string">'默认图地址'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><table><thead><tr><th align="left">属性</th><th align="left">发生时机</th></tr></thead><tbody><tr><td align="left">onclick</td><td align="left">在对象被点击时发生。</td></tr><tr><td align="left">ondblclick</td><td align="left">对象被双击时发生。</td></tr><tr><td align="left">onmousedown</td><td align="left">鼠标按钮被按下。</td></tr><tr><td align="left">onmousemove</td><td align="left">鼠标被移动。</td></tr><tr><td align="left">onmouseout</td><td align="left">鼠标从某元素移开。</td></tr><tr><td align="left">onmouseover</td><td align="left">鼠标移到某元素之上。</td></tr><tr><td align="left">onmouseup</td><td align="left">鼠标按键被松开。</td></tr></tbody></table><h4 id="单双击事件的区分"><a href="#单双击事件的区分" class="headerlink" title="单双击事件的区分"></a>单双击事件的区分</h4><p>鼠标点击事件中各个事件的发生顺序：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'i: '</span> + i + <span class="string">' onclick'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btn.ondblclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'i: '</span> + i + <span class="string">' ondblclick'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btn.onmousedown = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'i: '</span>+ i + <span class="string">' onmousedown'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btn.onmouseup = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'i: '</span> + i + <span class="string">' onmouseup'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当单击的时候显示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span>: <span class="number">1</span> onmousedown</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">2</span> onmouseup</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">3</span> onclick</span><br></pre></td></tr></table></figure><p>当双击的时候显示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span>: <span class="number">1</span> onmousedown</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">2</span> onmouseup</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">3</span> onclick</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">4</span> onmousedown</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">5</span> onmouseup</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">6</span> onclick</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">7</span> ondblclick</span><br></pre></td></tr></table></figure><p>可以得到：</p><blockquote><p>单击时： <code>onmousedown</code>==&gt; <code>onmouseup</code> ==&gt; <code>onclick</code></p><p>双击时：<code>onmousedown</code> ==&gt; <code>onmouseup</code> ==&gt; <code>onclick</code> ==&gt; <code>onmousedown</code> ==&gt; <code>onmouseup</code> ==&gt; <code>onclick</code> ==&gt; <code>ondblclick</code></p></blockquote><p>只要我们能把双击事件中的前两次单击事件清除掉，那就只剩下双击事件了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利用 setTimeout 和 clearTimeout 来实现对事件的清除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn.onmousedown = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'i: '</span> + i + <span class="string">' onmousedown'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btn.onmouseup = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'i: '</span> + i + <span class="string">' onmouseup'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="vbscript">        clearTimeout(<span class="built_in">timer</span>);</span></span><br><span class="line"><span class="actionscript">        timer = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'i: '</span> + i + <span class="string">' onclick'</span>);</span></span><br><span class="line">        &#125;, 200);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btn.ondblclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line"><span class="vbscript">        clearTimeout(<span class="built_in">timer</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'i: '</span> + i + <span class="string">' ondblclick'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在双击的时候显示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span>: <span class="number">1</span> onmousedown</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">2</span> onmouseup</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">3</span> onmousedown</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">4</span> onmouseup</span><br><span class="line"><span class="selector-tag">i</span>: <span class="number">5</span> ondblclick</span><br></pre></td></tr></table></figure><p>为了区分单击和双击事件，稍微延迟单击事件中的实际动作（单击后的实际想做的change），利用<code>setTimeout</code>使其延时，让程序继续往下走，然后在程序进入<code>dblclick</code> 事件时，利用<code>clearTimeout</code>来删除仍在等待中的响应事件（<code>setTimeout</code>设定的延时响应事件，即单击后的实际响应事件），如此便区分开了单击和双击事件。</p><h4 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#dv</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:orange</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dv = <span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> x = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> y = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> l = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> t = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 鼠标按下事件</span></span></span><br><span class="line"><span class="actionscript">    dv.onmousedown = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取x坐标和y坐标</span></span></span><br><span class="line">        x = e.clientX;</span><br><span class="line">        y = e.clientY;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取左部和顶部的偏移量</span></span></span><br><span class="line">        l = dv.offsetLeft;</span><br><span class="line">        t = dv.offsetTop;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 开关打开</span></span></span><br><span class="line"><span class="actionscript">        isDown = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置样式</span></span></span><br><span class="line"><span class="actionscript">        dv.style.cursor = <span class="string">'move'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 鼠标移动</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取x和y</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> nx = e.clientX;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> ny = e.clientY;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 计算移动后的做偏移量和顶部的偏移量</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> nl = nx - (x - l);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> nt = ny - (y - t);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            dv.style.left = nl + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">            dv.style.top = nt + <span class="string">'px'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 鼠标抬起事件</span></span></span><br><span class="line"><span class="actionscript">    dv.onmouseup = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">        dv.style.cursor = <span class="string">'default'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细品JavaScript的系统对象</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E7%BB%86%E5%93%81JavaScript%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%AF%B9%E8%B1%A1/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E7%BB%86%E5%93%81JavaScript%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>今天讲师有事下午自习，于是打开<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">w3schoole</a>，捋了捋JavaScript中的系统对象。</p><a id="more"></a><h2 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h2><p>Array对象用于在单个的变量中存储多个值。</p><h3 id="创建Array对象的语法"><a href="#创建Array对象的语法" class="headerlink" title="创建Array对象的语法"></a>创建Array对象的语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有使用参数 返回的数组为空，length为0。</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// []</span></span><br><span class="line"><span class="comment">// 只传递一个数字参数，返回具有指定个数、元素为 undefined 的数组。</span></span><br><span class="line"><span class="comment">// 纯数字的字符串返回只有该字符串的数组，不会转换为数字。</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>); <span class="comment">// [empty * 5]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'5'</span>); <span class="comment">// ['5']</span></span><br><span class="line"><span class="comment">// 其他参数时，将用参数指定的值初始化数组。</span></span><br><span class="line"><span class="keyword">new</span> Araay(<span class="number">5</span>, <span class="number">5</span>); <span class="comment">// [5, 5]</span></span><br></pre></td></tr></table></figure><h3 id="Array-对象方法"><a href="#Array-对象方法" class="headerlink" title="Array 对象方法"></a>Array 对象方法</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><blockquote><p>连接两个或多个数组。</p></blockquote><blockquote><p>不会改变原本的数组。</p></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.concat(array1, array2, ..., arrayn);</span><br></pre></td></tr></table></figure><blockquote><p>参数任意多个（一个及以上），可以是具体的值，也可以是数组对象。</p><p>返回一个新的数组，该数组是通过把所有参数添加到<code>arrayObject</code>中生成的，如果参数是数组，那么添加的是数组中的元素。</p><p>通俗地将就是把参数塞到<code>arrayObject</code>数组的后面，如果参数是数组，会把元素拿出来在塞到后面。</p></blockquote><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数不是数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr1.concat(<span class="number">4</span>,<span class="number">5</span>); <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr1.concat(arr2); <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><blockquote><p>用于把数组中的所有元素放入一个字符串。通过制定的分隔符进行分割。</p><p>不会改变原本的数组。</p></blockquote><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.join(separator=<span class="string">','</span>);</span><br></pre></td></tr></table></figure><blockquote><p>参数可选，指定要使用的分隔符。如果省略参数，默认使用逗号作为分隔符</p><p>返回一个字符串，该字符串时通过把<code>arrayObject</code>的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入separator字符串而生产的。</p><p>通俗地讲就是用参数把数组的每个元素连接成一个字符串。</p></blockquote><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="comment">// 没有参数</span></span><br><span class="line">arr.join(); <span class="comment">// George,John,Thomas</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用参数</span></span><br><span class="line">arr.join(<span class="string">'-'</span>); <span class="comment">// George-John-Thomas</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ['George', 'John', 'Thomas']</span></span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><blockquote><p>用于删除并返回数组的最后一个元素。</p><p>会改变原本的数组。</p><p>与<code>pop()</code>对应的是<code>shift()</code>：删除并返回数组的第一个元素，语法、参数、返回值类似，就不重复说明。</p></blockquote><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.pop();</span><br></pre></td></tr></table></figure><blockquote><p>没有参数。</p><p>返回<code>arrayObject</code>的最后一个元素。</p><p><code>pop()</code>方法会删除<code>arrayObject</code>的最后一个元素，把数组长度减1，并且返回它删除的元素的值。</p><p>如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。</p></blockquote><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">// Thomas</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">// John</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">// George</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);       <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><blockquote><p>向数组的末尾添加一个或多个元素，并返回新的长度。</p><p>会改变原本的数组。</p><p>与<code>push()</code>对应的是<code>unshift()</code>：想数组的开头添加一个或多个元素，并返回新的长度，语法、参数、返回值类似，就不重复说明。</p></blockquote><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.push(newelement1, newelement2, ..., newelementn);</span><br></pre></td></tr></table></figure><blockquote><p>参数是要添加到数组的元素，可添加多个元素。</p><p>返回添加到数组后的新长度。</p><p><code>push()</code>方法把它的参数顺序添加到 <code>arrayObject</code> 的尾部。它直接修改 <code>arrayObject</code>，而不是创建一个新的数组。</p><p><code>push()</code>方法和<code>pop()</code>方法使用数组提供的先进后出栈的功能。</p></blockquote><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.push(<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["George", "John", "Thomas"]</span></span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><blockquote><p>颠倒数组中元素的顺序。</p><p>会改变原本的数组。</p></blockquote><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.reverse();</span><br></pre></td></tr></table></figure><blockquote><p>没有参数。</p><p>返回颠倒后的数组。</p></blockquote><h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.reberse()); <span class="comment">// ["Thomas", "John", "George"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["Thomas", "John", "George"]</span></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><blockquote><p>从已有的数组中返回选定的元素。</p><p>不会改变原本的数组。</p></blockquote><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.slice(start,end);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>start</code>必需，规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。</p><p>参数<code>end</code>可选，规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，默认包含从 <code>start</code> 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</p><p>返回一个新的数组，从<code>start</code>到<code>end</code>（不包括该元素）的<code>arrayObject</code>中的元素。</p></blockquote><h5 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>)); <span class="comment">// ["George", "John", "Thomas"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">1</span>)); <span class="comment">// ["George"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-1</span>)); <span class="comment">// ["Thomas"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-3</span>,<span class="number">1</span>)); <span class="comment">// ["George"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-3</span>,<span class="number">-1</span>)); <span class="comment">// ["George", "John"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["George", "John", "Thomas"]</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><blockquote><p>对数组的元素进行排序。</p><p>会改变原本的数组</p></blockquote><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.sort(sortby);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>sortby</code>可选，规定排序顺序。必须是函数。</p><p>如果没有参数，将按字母顺序对数组中的元素进行排序，也就是按照字符编码的顺序进行排序。</p><p>如果想按照其他标准进行排序，就需要添加参数，参数是一个比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：</p><blockquote><p>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。</p></blockquote><blockquote><p>若 a 等于 b，则返回 0。</p></blockquote><blockquote><p>若 a 大于 b，则返回一个大于 0 的值。</p></blockquote><p>返回排序后的数组。</p></blockquote><h5 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 纯英文的字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()); <span class="comment">// ["George", "John", "Thomas"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["George", "John", "Thomas"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 数字或者数字开头的字符串</span></span><br><span class="line"><span class="comment">// 默认排序没有按照数值的大小进行排序，他们使用的是对比每个字符串第一个元素的字符编码顺序排序，若相同则再查看第二个元素，一次类推。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'10'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'100'</span> , <span class="string">'7'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()); <span class="comment">// ["10", "100", "12", "2", "3", "7"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">100</span>,<span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()); <span class="comment">// [10, 100, 12, 2, 3, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'10px'</span>, <span class="string">'2px'</span>, <span class="string">'3px'</span>, <span class="string">'12px'</span>, <span class="string">'100px'</span>, <span class="string">'7px'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()); <span class="comment">// ["100px", "10px", "12px", "2px", "3px", "7px"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要实现数字或纯数字字符串按数值大小排序，需要添加排序函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a,b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'10'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'100'</span> , <span class="string">'7'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(sortNumber)); <span class="comment">// ["2", "3", "7", "10", "12", "100"]</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><blockquote><p>向数组中添加/删除项目，然后返回比删除的项目。</p><p>会改变原本的数组。</p></blockquote><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.splic(index,howmany,item1,...,itemn);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>index</code>，必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</p><p>参数<code>howmany</code>，必需。要删除的项目数量。如果设置为 0，则不会删除项目。</p><p>参数<code>item</code>，可选。向数组添加的新项目。</p><p>如果从 <code>arrayObject</code>中删除了元素，则返回的是含有被删除的元素的数组。否则返回<code>[]</code></p></blockquote><h5 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// ["John", "Thomas"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["George"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">1</span>)); <span class="comment">// [] 超过了返回空数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'John'</span>, <span class="string">'Thomas'</span>)); <span class="comment">// [] </span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["George", "John", "Thomas"]</span></span><br></pre></td></tr></table></figure><h4 id="toSource"><a href="#toSource" class="headerlink" title="toSource()"></a>toSource()</h4><blockquote><p>表示对象的源代码</p></blockquote><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.toSource();</span><br></pre></td></tr></table></figure><blockquote><p>只有Gecko核心的浏览器（比如Firefox）支持该方法。</p></blockquote><h5 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">employee</span>(<span class="params">name, job, born</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.job=job;</span><br><span class="line">    <span class="keyword">this</span>.born=born;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bill = <span class="keyword">new</span> employee(<span class="string">'Bill Gates'</span>, <span class="string">'Engineer'</span>, <span class="number">1985</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bill.toSource()); <span class="comment">// (&#123;name:"Bill Gates", job:"Engineer", born:1985&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><blockquote><p>把数组转换为字符串，并返回结果。</p><p>数组中的元素之间用逗号<code>,</code>分隔。</p><p>不会改变原本的数组。</p></blockquote><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.toString();</span><br></pre></td></tr></table></figure><blockquote><p>没有参数</p><p>返回与没有参数的<code>join()</code>方法返回的字符串相同。</p><p>当数组用于字符串环境时，js会调用这一方法将数字自动转换成字符串。</p></blockquote><h5 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString()); <span class="comment">// George,John,Thomas</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ['George', 'John', 'Thomas']</span></span><br></pre></td></tr></table></figure><h2 id="Boolean-对象"><a href="#Boolean-对象" class="headerlink" title="Boolean 对象"></a>Boolean 对象</h2><blockquote><p>Boolean 对象表示两个值：<code>true</code>或<code>false</code>;</p></blockquote><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(value); <span class="comment">// 构造函数</span></span><br><span class="line"><span class="built_in">Boolean</span>(value);     <span class="comment">// 转换函数</span></span><br></pre></td></tr></table></figure><blockquote><p>参数<code>value</code>由布尔对象存放的值或者要转换成布尔值的值。</p><p>当作为构造函数调用的时候，Boolean()将把它的参数转换成一个布尔值，并且返回一个包含该值的 Boolean 对象。</p><p>当作为一个函数调用的时候，Boolean()只会把它的参数转换成一个原始的布尔值，并且返回这个值。</p><p>如果省略<code>value</code>参数，或者是指为<code>0</code>/<code>-2</code>/<code>null</code>/<code>&#39;&#39;</code>/<code>false</code>/<code>undefined</code>/<code>NaN</code>，则该对象设置为<code>false</code>。否则为<code>true</code>。</p></blockquote><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'true'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Boolean&#123;true&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Boolean&#123;false&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">Boolean</span>(<span class="string">'true'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">Boolean</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><h4 id="toString"><a href="#toString" class="headerlink" title="toString()"></a>toString()</h4><blockquote><p>可把逻辑值转换为字符串，并返回结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.toString()); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.toString()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>这和<code>PHP</code>有很大的不同。</strong></p></blockquote><h2 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h2><blockquote><p>用于处理日期和时间</p></blockquote><h3 id="对象方法-1"><a href="#对象方法-1" class="headerlink" title="对象方法"></a>对象方法</h3><h4 id="Date"><a href="#Date" class="headerlink" title="Date()"></a>Date()</h4><blockquote><p>返回当日的日期和时间。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>()); <span class="comment">// demo.html:88 Wed Sep 25 2019 16:26:40 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h4 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a>getDate()</h4><blockquote><p>返回月份的某一天。</p><p>返回值是1~31之间的某一个整数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getDate()); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><h4 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h4><blockquote><p>返回表示星期的某一天的数字。</p><p>返回值是 0（周日） 到 6（周六） 之间的一个整数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getDay()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>可以创建一个数组，这样可以输出星期的名称，而不是数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> weekday=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>)</span><br><span class="line">weekday[<span class="number">0</span>]=<span class="string">"Sunday"</span>;</span><br><span class="line">weekday[<span class="number">1</span>]=<span class="string">"Monday"</span>;</span><br><span class="line">weekday[<span class="number">2</span>]=<span class="string">"Tuesday"</span>;</span><br><span class="line">weekday[<span class="number">3</span>]=<span class="string">"Wednesday"</span>;</span><br><span class="line">weekday[<span class="number">4</span>]=<span class="string">"Thursday"</span>;</span><br><span class="line">weekday[<span class="number">5</span>]=<span class="string">"Friday"</span>;</span><br><span class="line">weekday[<span class="number">6</span>]=<span class="string">"Saturday"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"Today it is "</span> + weekday[d.getDay()]); <span class="comment">// Today it is Wednesday</span></span><br></pre></td></tr></table></figure><h4 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h4><blockquote><p>返回标识月份的数字。</p><p>返回值是 0（一月） 到 11（十二月） 之间的一个整数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getMonth()); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>同样的，可以创建一个数组，这样可以输出月份的名称，而不是数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> month=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>)</span><br><span class="line">month[<span class="number">0</span>]=<span class="string">"January"</span>;</span><br><span class="line">month[<span class="number">1</span>]=<span class="string">"February"</span>;</span><br><span class="line">month[<span class="number">2</span>]=<span class="string">"March"</span>;</span><br><span class="line">month[<span class="number">3</span>]=<span class="string">"April"</span>;</span><br><span class="line">month[<span class="number">4</span>]=<span class="string">"May"</span>;</span><br><span class="line">month[<span class="number">5</span>]=<span class="string">"June"</span>;</span><br><span class="line">month[<span class="number">6</span>]=<span class="string">"July"</span>;</span><br><span class="line">month[<span class="number">7</span>]=<span class="string">"August"</span>;</span><br><span class="line">month[<span class="number">8</span>]=<span class="string">"September"</span>;</span><br><span class="line">month[<span class="number">9</span>]=<span class="string">"October"</span>;</span><br><span class="line">month[<span class="number">10</span>]=<span class="string">"November"</span>;</span><br><span class="line">month[<span class="number">11</span>]=<span class="string">"December"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"The month is "</span> + month[d.getMonth()]); <span class="comment">// The month is September</span></span><br></pre></td></tr></table></figure><h4 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear()"></a>getFullYear()</h4><blockquote><p>返回一个表示年份的4位数字。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getFullYear()); <span class="comment">// 2019</span></span><br></pre></td></tr></table></figure><h4 id="getHours"><a href="#getHours" class="headerlink" title="getHours()"></a>getHours()</h4><blockquote><p>返回时间的小时字段。</p><p>返回值是 0 （午夜） 到 23 （晚上 11 点）之间的一个整数。</p><p>如果小于10，返回一位数字；大于10，返回两位数字。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getHours()); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h4 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes()"></a>getMinutes()</h4><blockquote><p>返回时间的分钟字段。</p><p>返回值是 0 ~ 59 之间的一个整数。</p><p>同样的，如果小于10，返回一位数字；大于10，返回两位数字。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getMinutes()); <span class="comment">// 43</span></span><br></pre></td></tr></table></figure><h4 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds()"></a>getSeconds()</h4><blockquote><p>返回时间的秒。</p><p>返回值是 0 ~ 59 之间的一个整数。</p><p>同样的，如果小于10，返回一位数字；大于10，返回两位数字。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getSeconds()); <span class="comment">// 57</span></span><br></pre></td></tr></table></figure><h4 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h4><blockquote><p>返回时间戳，以毫秒为单位。</p><p>距1970年1月1日0时0分0秒之间的毫秒数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getTime() + <span class="string">" milliseconds since 1970/01/01"</span>); <span class="comment">// 1569401098103 milliseconds since 1970/01/01</span></span><br></pre></td></tr></table></figure><h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><blockquote><p>Math对象无需创建，可以直接通过把Math作为对象使用就可以调用其所有属性和方法。</p></blockquote><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算术常量e，即自然对数的底数</span></span><br><span class="line"><span class="built_in">Math</span>.E <span class="comment">// 2.718281828459045</span></span><br><span class="line"><span class="comment">// 2的自然对数</span></span><br><span class="line"><span class="built_in">Math</span>.LN2 <span class="comment">// 0.6931471805599453</span></span><br><span class="line"><span class="comment">// 10的自然对数</span></span><br><span class="line"><span class="built_in">Math</span>.LN10 <span class="comment">// 2.302585092994046</span></span><br><span class="line"><span class="comment">// 以2为底的e的对数</span></span><br><span class="line"><span class="built_in">Math</span>.LOG2E <span class="comment">// 1.4426950408889634</span></span><br><span class="line"><span class="comment">// 以10为底的e的对数</span></span><br><span class="line"><span class="built_in">Math</span>.LOG10E <span class="comment">// 0.4342944819032518</span></span><br><span class="line"><span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.PI <span class="comment">// 3.141592653589793</span></span><br><span class="line"><span class="comment">// 2的平方根的倒数</span></span><br><span class="line"><span class="built_in">Math</span>.SQRT1_2 <span class="comment">// 0.7071067811865476</span></span><br><span class="line"><span class="comment">// 2的平方根</span></span><br><span class="line"><span class="built_in">Math</span>.SQRT2 <span class="comment">// 1.4142135623730951</span></span><br></pre></td></tr></table></figure><h3 id="对象方法-2"><a href="#对象方法-2" class="headerlink" title="对象方法"></a>对象方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>abs()</td><td>返回数的绝对值</td></tr><tr><td>ceil()</td><td>对数进行向上取整</td></tr><tr><td>floor()</td><td>对数进行向下取整</td></tr><tr><td>round()</td><td>对数进行四舍五入取整</td></tr><tr><td>pow(x,y)</td><td>返回x的y次幂</td></tr><tr><td>max(x,y)</td><td>返回x和y中的最大值（可以有多个数比较）</td></tr><tr><td>min(x,y)</td><td>返回x和y中的最小值（可以有多个数比较）</td></tr><tr><td>random()</td><td>返回0~1之间的随机数</td></tr></tbody></table><h2 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h2><blockquote><p>String 对线用于处理文本(字符串)。</p></blockquote><h3 id="对象属性-1"><a href="#对象属性-1" class="headerlink" title="对象属性"></a>对象属性</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><blockquote><p>返回字符串中的字符数目。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">'Hello World'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(txt.length); <span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 一个中文长度也是1</span></span><br><span class="line"><span class="keyword">var</span> txt = <span class="string">'一二三'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(txt.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="对象方法-3"><a href="#对象方法-3" class="headerlink" title="对象方法"></a>对象方法</h3><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><blockquote><p>返回指定位置的字符</p></blockquote><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.charAt(index);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>index</code>，必需。表示字符串中某个位置的数字。</p><p>字符串第一个字符的小标为0。</p><p>如果参数<code>index</code>不在0与<code>string.length</code>之间，则返回一个空字符串。</p></blockquote><h5 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>)); <span class="comment">// e</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">20</span>)); <span class="comment">// ''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个中文字也只占一位,不会出现乱码情况</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'我爱祖国'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>)); <span class="comment">// 爱</span></span><br></pre></td></tr></table></figure><h4 id="concat-1"><a href="#concat-1" class="headerlink" title="concat()"></a>concat()</h4><blockquote><p>连接两个或多个字符串。</p><p>不会改变原本的字符串。</p></blockquote><h5 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.concat(string1,string2,...,stringn);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>string</code>，必需。将被连接为字符串的字符串对象。</p><p>使用<code>+</code>来连接字符串更简便。</p></blockquote><h5 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">"Hello "</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">"world!"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str1.concat(str2)); <span class="comment">// Hello world!</span></span><br></pre></td></tr></table></figure><h4 id="fontcolor"><a href="#fontcolor" class="headerlink" title="fontcolor()"></a>fontcolor()</h4><blockquote><p>按照指定的颜色来显示字符串。</p></blockquote><h5 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.fontcolor(color);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>color</code>，必需。字符串，必须是颜色名(<code>&#39;red&#39;</code>)、RGB值(<code>&#39;rgb(255,0,0)&#39;</code>)或十六进制(<code>&#39;#FF0000&#39;</code>)。</p><p>不区分大小写。</p></blockquote><blockquote><p>自己试验RGB没有改变颜色。</p></blockquote><h5 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'Hello world'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.fontcolor(<span class="string">'red'</span>));</span><br></pre></td></tr></table></figure><h4 id="fontsize"><a href="#fontsize" class="headerlink" title="fontsize()"></a>fontsize()</h4><blockquote><p>按照指定的尺寸来显示字符串。</p></blockquote><h5 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.fontsize(size);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>size</code>必须是1~7的整数。</p><p>数字越大，字体越大。这与<code>HTML</code>的<code>h</code>标签相反。</p></blockquote><h5 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello world'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.fontsize(<span class="number">7</span>));</span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><blockquote><p>返回某个指定的字符串值在字符串中首次出翔的位置。</p></blockquote><blockquote><p>String对象还有一个对应方法：<code>lastIndexOf()</code>从后向前检索。与该方法类似，只是返回的是最后一次出现的位置。</p></blockquote><h5 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.indexOf(searchvalue,fromindex);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>searchvalue</code>，必需。规定需检索的字符串值。</p><p>参数<code>fromindex</code>，可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 <code>stringObject.length - 1</code>。如省略该参数，则将从字符串的首字符开始检索。</p><p>如果找到返回第一次出现的位置（下标），如果没有出现，返回<strong>-1</strong>.</p><p>对大小写敏感。</p></blockquote><h5 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'hello'</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'Hello'</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h4><blockquote><p>在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><p>该方法类似<code>indexOf()</code>和<code>lastIndexOf()</code>，但它返回指定的值。</p></blockquote><h5 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringObject.match(searchvalue);</span><br><span class="line">stringObject.match(regexp);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>searchvalue</code>，必需。规定要检索的字符串。</p><p>参数<code>regexp</code>，必需。规定要匹配的RegExp对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p><p>返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。</p><p>如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。</p><p>如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。</p><p>严格区分大小写。</p></blockquote><h5 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">"world"</span>)); <span class="comment">// world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">"World"</span>)); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式检索</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"1 plus 2 equal 3"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d+/g</span>)); <span class="comment">// ['1', '2', '3']</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d+/</span>)); <span class="comment">// ["1", index: 0, input: "1 plus 2 equal 3", groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><blockquote><p>在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的字符。</p></blockquote><h5 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.replace(regexp/substr, replacement);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>regexp/subst</code>，必需。规定子字符串或正则表达式。</p><p>参数<code>replacement</code>，必需。一个字符串。规定了替换文本。</p><p>返回被替换了的字符串。</p><p>如果正则表达式具有全局标识，则替换所有，否则只替换第一个匹配子串。</p><p>严格区分大小写。</p></blockquote><h5 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'visit Microsoft'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.replace(<span class="string">'Microsoft'</span>, <span class="string">'W3School'</span>)); <span class="comment">// visit W3School</span></span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><blockquote><p>把一个字符串分割成字符串数组。</p></blockquote><h5 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.split(separator,howmany);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>separator</code>，必需。字符串或正则表达式，从该参数指定的位置分割。</p><p>参数<code>howmany</code>，可选。指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p><p>返回一个字符串数组，不包括<code>separator</code>本身。</p><p>如果把空字符串<code>&#39;&#39;</code>作为参数，那么字符串中的每个字符之间都会被分割。</p></blockquote><h5 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'How are you doing today?'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">' '</span>)); <span class="comment">// ["How", "are", "you", "doing", "today?"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>)); <span class="comment">// ["H", "o", "w", " ", "a", "r", "e", " ", "y", "o", "u", " ", "d", "o", "i", "n", "g", " ", "t", "o", "d", "a", "y", "?"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">' '</span>,<span class="number">3</span>)); <span class="comment">// ["How", "are", "you"]</span></span><br></pre></td></tr></table></figure><h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><blockquote><p>检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。</p></blockquote><h5 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.search(regexp);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>regexp</code>， 可以是需要在 stringObject 中检索的子串，也可以是需要检索的 RegExp 对象。</p><p>返回第一个与参数匹配的子串的起始位置；如果没有找到，则返回-1。</p><p>该方法不执行全局匹配，它会忽略标识g。并且会忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置。</p><p>对大小写敏感。</p></blockquote><h5 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'visit W3School'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.search(W3School)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h4><blockquote><p>在字符串中抽取从<code>start</code>下标开始的指定数目的字符。</p></blockquote><p>#####语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.substr(start,length);</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>start</code>，必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。</p><p>参数<code>length</code>，可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 <em>stringObject</em> 的开始位置到结尾的字串。</p><p>返回一个新的字符串，包含从<code>start</code>（包括 <code>start</code>所指的字符）开始的 <em>length</em> 个字符。如果没有指定 <em>length*，那么返回的字符串包含从 *start</em> 到 <em>stringObject</em> 的结尾的字符。</p></blockquote><h5 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>)); <span class="comment">// lo world</span></span><br></pre></td></tr></table></figure><h4 id="toLowerCase-toUpperCase"><a href="#toLowerCase-toUpperCase" class="headerlink" title="toLowerCase()/toUpperCase()"></a>toLowerCase()/toUpperCase()</h4><blockquote><p>把字符串转换为小写/大写。</p></blockquote><h5 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringObject.toLowerCase();</span><br><span class="line">stringObject.toUpperCase();</span><br></pre></td></tr></table></figure><blockquote><p>返回一个新的字符串。</p></blockquote><h5 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello World'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.toLowerCase()); <span class="comment">// hello world</span></span><br><span class="line"><span class="built_in">document</span>.write(str.toUpperCase()); <span class="comment">// HELLO WORLD</span></span><br></pre></td></tr></table></figure><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><p>RegExp对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>之星对大小写不敏感的匹配。</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</td></tr></tbody></table><h3 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h3><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[abc]</td><td align="left">查找方括号之间的任何字符。</td></tr><tr><td align="left">[^abc]</td><td align="left">查找任何不在方括号之间的字符。</td></tr><tr><td align="left">[0-9]</td><td align="left">查找任何从 0 至 9 的数字。</td></tr><tr><td align="left">[a-z]</td><td align="left">查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td align="left">[A-Z]</td><td align="left">查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td align="left">[A-z]</td><td align="left">查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td align="left">[adgk]</td><td align="left">查找给定集合内的任何字符。</td></tr><tr><td align="left">[^adgk]</td><td align="left">查找给定集合外的任何字符。</td></tr><tr><td align="left">(red|blue|green)</td><td align="left">查找任何指定的选项。</td></tr></tbody></table><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th align="left">元字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">查找单个字符，除了换行和行结束符。</td></tr><tr><td align="left">\w</td><td align="left">查找单词字符。</td></tr><tr><td align="left">\W</td><td align="left">查找非单词字符。</td></tr><tr><td align="left">\d</td><td align="left">查找数字。</td></tr><tr><td align="left">\D</td><td align="left">查找非数字字符。</td></tr><tr><td align="left">\s</td><td align="left">查找空白字符。</td></tr><tr><td align="left">\S</td><td align="left">查找非空白字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配单词边界。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。</td></tr><tr><td align="left">\0</td><td align="left">查找 NUL 字符。</td></tr><tr><td align="left">\n</td><td align="left">查找换行符。</td></tr><tr><td align="left">\f</td><td align="left">查找换页符。</td></tr><tr><td align="left">\r</td><td align="left">查找回车符。</td></tr><tr><td align="left">\t</td><td align="left">查找制表符。</td></tr><tr><td align="left">\v</td><td align="left">查找垂直制表符。</td></tr><tr><td align="left">\xxx</td><td align="left">查找以八进制数 xxx 规定的字符。</td></tr><tr><td align="left">\xdd</td><td align="left">查找以十六进制数 dd 规定的字符。</td></tr><tr><td align="left">\uxxxx</td><td align="left">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table><thead><tr><th align="left">量词</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">匹配任何包含至少一个 n 的字符串。</td></tr><tr><td align="left">*</td><td align="left">匹配任何包含零个或多个 n 的字符串。</td></tr><tr><td align="left">?</td><td align="left">匹配任何包含零个或一个 n 的字符串。</td></tr><tr><td align="left">{X}</td><td align="left">匹配包含 X 个 n 的序列的字符串。</td></tr><tr><td align="left">{X,Y}</td><td align="left">匹配包含 X 至 Y 个 n 的序列的字符串。</td></tr><tr><td align="left">{X,}</td><td align="left">匹配包含至少 X 个 n 的序列的字符串。</td></tr><tr><td align="left">n$</td><td align="left">匹配任何结尾为 n 的字符串。</td></tr><tr><td align="left">^n)</td><td align="left">匹配任何开头为 n 的字符串。</td></tr><tr><td align="left">?=n</td><td align="left">匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td align="left">?!n</td><td align="left">匹配任何其后没有紧接指定字符串 n 的字符串。</td></tr></tbody></table><blockquote><p>支持正则表达式的String对象的方法：</p><ul><li>search()</li><li>match()</li><li>replace()</li><li>split()</li></ul></blockquote><p>最后的最后，这一篇文章历时5个小时，只看文档比听课或者看视频难受得多，多次想先歇歇，反正明天还有个上午。完成一件事不仅仅需要激情，还需要持久。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记4</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B04/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<p>第四天的学习内容：</p><blockquote><p>回调、匿名、递归函数；变量的作用域链及打破作用域链；构造器函数；原型对象；BOM</p></blockquote><p>应用：</p><blockquote><p>进度条； 失去焦点改变标题</p></blockquote><a id="more"></a><h2 id="回调、匿名、递归函数"><a href="#回调、匿名、递归函数" class="headerlink" title="回调、匿名、递归函数"></a>回调、匿名、递归函数</h2><blockquote><p>回调函数：被当做实参进行调用的函数。</p><p>匿名函数：没有函数名的函数。</p><p>递归函数：在自己里面调用自己的函数。</p></blockquote><p>由于有<code>php</code>的基础，就不详细介绍这些函数的作用，直接放实例。</p><p>回调+匿名函数的实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'午时已到~'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>递归函数的实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = prompt(<span class="string">'你是谁？'</span>); <span class="comment">// 弹窗 返回输入的内容或者false</span></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="string">'我是谁。'</span>) &#123;</span><br><span class="line">        alert(<span class="string">'欢迎回来！'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">login();</span><br></pre></td></tr></table></figure><p>另外还有一种只能执行一次的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 通过将自己转为空的匿名函数从而使下次调用不执行函数体里面的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p><p>闭包函数就是外部函数被调用后，它的变量不会消失，仍然被内部函数所使用，而且所有的内部函数都拥有对外部函数的访问权限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;       <span class="comment">// 外层函数，闭包函数</span></span><br><span class="line">    <span class="keyword">var</span> n =<span class="number">0</span>;        <span class="comment">// 私有变量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">m</span>) </span>&#123;  <span class="comment">// 内部函数，私有函数</span></span><br><span class="line">        n = n + m;   <span class="comment">// 递加上级私有变量的值</span></span><br><span class="line">        <span class="keyword">return</span> n;    <span class="comment">// 返回改变后的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;        <span class="comment">// 返回私有函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a();         <span class="comment">// 调用外层函数，返回内部函数</span></span><br><span class="line"><span class="built_in">console</span>.log(b(<span class="number">3</span>));   <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b(<span class="number">3</span>));   <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(b(<span class="number">3</span>));   <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><p>这样当在全局作用域中反复调用内部函数时，将会不断把参数值递加给外层函数的私有变量n身上，形成闭包对外部函数的私有变量长时保护作用。</p><p>如果没有闭包函数的作用，当调用外部函数之后，其定义的私有变量就不再存在，也就无法实现值的递增效果。</p><h2 id="作用域链及打破"><a href="#作用域链及打破" class="headerlink" title="作用域链及打破"></a>作用域链及打破</h2><blockquote><p>作用域链是<code>js</code>函数在创建的时候定义的，用来寻找变量的一种索引。</p></blockquote><blockquote><p>作用域链索引的内部规则是将函数自身的本地变量放在最前面，把自身的父级函数变量放在其次，再把高一级的函数的变量放在更后面，以此类推到window全局对象位置。</p></blockquote><blockquote><p>当需要查找一个变量的时候，js解析器会从作用域链去查找该变量，先从该函数的本地变量开始查找，如果没有，则在下一级作用域链进行查找，直到最后也没找到相应变量则会报未定义的错误。</p></blockquote><blockquote><p>如果全局变量和局部变量重名，局部作用域中的局部变量会覆盖全局变量，直到离开该局部变量后恢复。</p></blockquote><blockquote><p>可以在局部作用域中使用<code>window</code>全局变量设置，使父级及更上级作用域访问，即打破作用域链。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'局部变量'</span>;</span><br><span class="line">    <span class="built_in">window</span>.b = <span class="string">'window的全局变量'</span>;</span><br><span class="line">&#125;</span><br><span class="line">demo();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 报错，全局不能访问局部变量</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 'window的全局变量'</span></span><br></pre></td></tr></table></figure><h2 id="构造器函数"><a href="#构造器函数" class="headerlink" title="构造器函数"></a>构造器函数</h2><p>当需要创建多个属性和方法都相同的对象时，可以使用构造函数创建:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明构造函数的语法和普通函数相同，但构造函数的函数名首字母大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,stuID</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 通过new调用时，构造函数中的this表示正在创建的对象</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.stuID = stuID;</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'正在学习'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数创建对象，必须用过new调用</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>,<span class="number">1001</span>);</span><br><span class="line">s1.study(); <span class="comment">// 正在学习</span></span><br></pre></td></tr></table></figure><p>但上面是<code>ES5</code>的内容，在<code>ES6</code>中，<code>class</code>类不作为对象的模板被引用，可以通过<code>class</code>关键字定义类。</p><blockquote><p>class的本质还是function，但类时不可重复声明！</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Study</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name,stuID) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.stuID = stuID;</span><br><span class="line">    &#125;   </span><br><span class="line">    study()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'正在学习'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Study(<span class="string">'张三'</span>,<span class="number">1001</span>);</span><br><span class="line">s1.study(); <span class="comment">// 正在学习</span></span><br></pre></td></tr></table></figure><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>当创建构造器函数后，如果需要添加新属性或方法，则需要prototype属性。</p><blockquote><p>在js中，我们所创建的每一个函数，解析器都会为他添加一个prototype属性，这个属性对应一个对象，就是原型对象</p><p>当我们访问一个对象的属性或方法时，会先在自身找，找不到就去原型中找，再找不到就去原型的原型中找，直到找到Object。</p></blockquote><p>例如在上面创造的构造函数添加新属性和方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Study.prototype.money = <span class="string">'100'</span>;</span><br><span class="line">Study.prototype.listen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">                         </span>&#123;</span><br><span class="line">                             <span class="built_in">console</span>.log(<span class="string">'正在听课'</span>);</span><br><span class="line">                         &#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Study(<span class="string">'张三'</span>, <span class="number">1001</span>);</span><br><span class="line">s1.listen(); <span class="comment">// 正在听课</span></span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><blockquote><p><code>BOM:Browser Object Model</code>是浏览器对象模型，提供了独立与内容的，可以与浏览器窗口进行互动的对象结构。</p></blockquote><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><blockquote><p><code>BOM</code>的和新对象，它表示浏览器的一个实例。</p><p>所有全局变量是<code>window</code>对象的属性</p><p>所有全局函数是<code>window</code>对象的方法</p></blockquote><h4 id="常用对象方法"><a href="#常用对象方法" class="headerlink" title="常用对象方法"></a>常用对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'提示信息'</span>); <span class="comment">// 显示带有一段消息和一个确认按钮的警告框。</span></span><br><span class="line">confirm(<span class="string">'确认信息'</span>); <span class="comment">// 显示带有一段消息以及确认按钮和取消按钮的对话框。</span></span><br><span class="line">prompt(<span class="string">'弹出输入框'</span>, <span class="string">'默认值'</span>); <span class="comment">// 显示可提示用户输入的对话框。</span></span><br><span class="line">open(<span class="string">'url地址'</span>,<span class="string">'打开方式(_self或_black)，‘新窗口的大小'</span>); <span class="comment">// 打开一个新的浏览器窗口 注：如果url为空，则默认打开一个空白页面；如果打开方式为空，则默认为新窗口方式打开页面；返回值为新打开窗口的window对象</span></span><br><span class="line">setTimeout(<span class="string">'函数'</span>,<span class="string">'时间'</span>); <span class="comment">// 在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line">setInterval(<span class="string">'函数'</span>,<span class="string">'时间'</span>); <span class="comment">// 按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line">clearTimeout(<span class="string">'setTimeout的返回值'</span>); <span class="comment">// 取消由 setTimeout() 方法设置的 timeout。</span></span><br><span class="line">clearInterval(<span class="string">'setInterval的返回值'</span>); <span class="comment">// 取消由 setInterval() 设置的 timeout。</span></span><br></pre></td></tr></table></figure><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><blockquote><p>用于获得当前页面的地址，并把浏览器重定向到新的页面。</p></blockquote><h4 id="常用对象属性"><a href="#常用对象属性" class="headerlink" title="常用对象属性"></a>常用对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location.herf = <span class="string">'url地址'</span>; <span class="comment">// 跳转到url地址</span></span><br><span class="line">location.hash; <span class="comment">// 设置或返回#号后面的字符串</span></span><br><span class="line">location.search; <span class="comment">// 设置或返回?号后面的所有制</span></span><br><span class="line">location.portocole; <span class="comment">// 设置或返回当前url的协议</span></span><br></pre></td></tr></table></figure><h4 id="常用对象方法-1"><a href="#常用对象方法-1" class="headerlink" title="常用对象方法"></a>常用对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.assign(<span class="string">'url'</span>); <span class="comment">// 加载新的文档</span></span><br><span class="line">location.reload(); <span class="comment">// 重新加载当前文档</span></span><br><span class="line">location.replace(); <span class="comment">// 用新文档替换当前文档</span></span><br></pre></td></tr></table></figure><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><blockquote><p>包含有关访问者浏览器的信息</p></blockquote><h4 id="常用对象属性-1"><a href="#常用对象属性-1" class="headerlink" title="常用对象属性"></a>常用对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">navigator.userAgent; <span class="comment">// 返回由客户机发送服务器的 user-agent 头部的值。</span></span><br><span class="line"><span class="comment">// 用来完成浏览器的判断</span></span><br><span class="line"><span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'Chrome'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'是谷歌浏览器'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'不是谷歌浏览器'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><blockquote><p>包含有关用户屏幕的信息</p></blockquote><h4 id="常用对象属性-2"><a href="#常用对象属性-2" class="headerlink" title="常用对象属性"></a>常用对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen.availWidth; <span class="comment">// 返回访问者屏幕的宽度，以像素计，减去界面特性，如窗口任务栏。</span></span><br><span class="line">screen.availHeight; <span class="comment">// 返回访问者屏幕的高度，以像素计，减去界面特性，如窗口任务栏。</span></span><br></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><blockquote><p>包含用户在浏览器窗口访问过的<code>url</code></p></blockquote><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history.back(); <span class="comment">// 加载历史列表的前一个url。相当于浏览器的后退按钮</span></span><br><span class="line">history.forward(); <span class="comment">// 加载历史列表的下一个url。相当于浏览器的前进按钮</span></span><br><span class="line">histor.go(<span class="string">'参数'</span>); <span class="comment">// 加载历史列表的某一个页面。 -1表示后退一步 1表示前进一步</span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="1-进度条"><a href="#1-进度条" class="headerlink" title="1. 进度条"></a>1. 进度条</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>: <span class="number">#f2f2f2</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#main</span>&#123;<span class="attribute">height</span>: <span class="number">6px</span>;<span class="attribute">width</span>: <span class="number">500px</span>;<span class="attribute">margin</span>:<span class="number">100px</span> auto;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#inner</span>&#123;</span></span><br><span class="line">    height: 6px;</span><br><span class="line">    width: 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#e4a348</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line">    top: 8px;</span><br><span class="line">    left: 5px;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#line</span>&#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        left: 5px;</span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:14px</span>;</span></span><br><span class="line">        width: 560px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border-top</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"begin(this)"</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> _width = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> timer;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">begin</span><span class="params">(btn)</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 判断定时器是否开始，主要是防止定时器叠加。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (timer === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            btn.innerHTML = <span class="string">'暂停'</span>;</span></span><br><span class="line"><span class="actionscript">            timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">            &#123;</span><br><span class="line">                _width++;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 根据进度条的长度改变背景颜色</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (_width &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    inner.style.background = <span class="string">'#e4a348'</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (_width &gt; <span class="number">150</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    inner.style.background = <span class="string">'#37a1d4'</span>;</span></span><br><span class="line">                &#125; </span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (_width &gt; <span class="number">350</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    inner.style.background = <span class="string">'#4acec8'</span>;</span></span><br><span class="line">                &#125; </span><br><span class="line"><span class="actionscript">                <span class="comment">// 当达到100%时清除定时器</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (_width &gt;= <span class="number">560</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    inner.style.background = <span class="string">'#ccc'</span>;</span></span><br><span class="line"><span class="actionscript">                    btn.innerHTML = <span class="string">'下载完成'</span>;</span></span><br><span class="line"><span class="vbscript">                    clearInterval(<span class="built_in">timer</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                inner.style.width = _width + <span class="string">'px'</span>;</span></span><br><span class="line">            &#125;, 10);</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 暂停功能</span></span></span><br><span class="line"><span class="actionscript">            btn.innerHTML = <span class="string">'继续'</span>;</span></span><br><span class="line"><span class="vbscript">            clearInterval(<span class="built_in">timer</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将定时器的返回值改为undefined 从而点击按钮能够继续</span></span></span><br><span class="line"><span class="actionscript">            timer = <span class="literal">undefined</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-失去焦点改变标题"><a href="#2-失去焦点改变标题" class="headerlink" title="2.失去焦点改变标题"></a>2.失去焦点改变标题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onblur</span>=<span class="string">"change()"</span> <span class="attr">onfocus</span>=<span class="string">"change(true)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">(flag)</span></span></span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.title = <span class="string">'正常标题'</span>;</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.title = <span class="string">'你快回来'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onvisibilitychange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'你快回来'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'正常标题'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置定时器的时候注意是否存在定时器叠加的问题。</span></span><br><span class="line"><span class="comment">// 递归、回调、匿名函数的使用。</span></span><br><span class="line">confirm(); <span class="comment">// 确认框</span></span><br><span class="line">prompt(); <span class="comment">// 对话框</span></span><br><span class="line">location.href = <span class="string">'url地址'</span>; <span class="comment">// 跳转</span></span><br><span class="line">location.protocol; <span class="comment">// 当前url的协议</span></span><br><span class="line">location.reload(); <span class="comment">// 重新加载当前页</span></span><br><span class="line">history.go(); <span class="comment">// -1 后退一步 1 前进一步</span></span><br><span class="line">screen.availWidth; <span class="comment">// 屏幕可用宽度</span></span><br><span class="line">screen.availHeight; <span class="comment">// 屏幕可用高度</span></span><br><span class="line">navigator.userAgent; <span class="comment">// 浏览器的详细信息</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记3</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B03/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<p>第三天学习内容：</p><blockquote><p>进制转换，得到对象的三种方式，包装对象，函数的定义、调用和返回值，作用域的概念，局部变量的提前声明</p></blockquote><p>应用：</p><blockquote><p>求未知个参数的和的函数，滚动的长标题，跑马灯</p></blockquote><a id="more"></a><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>开头为<code>0b</code>如<code>0b1101</code>的数值为二进制</p><p>开头为<code>0</code>如<code>01234</code>的数值为八进制</p><p>开头为<code>0x</code>如<code>0x1a2b</code>的数值为十六进制</p><h3 id="其他进制转换为十进制"><a href="#其他进制转换为十进制" class="headerlink" title="其他进制转换为十进制"></a>其他进制转换为十进制</h3><p>数值按权展开：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0b1101</span>); <span class="comment">// 1*2^3+1*2^2+1*2^0 = 13</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">01234</span>); <span class="comment">// 1*8^3+2*8^2+3*8^1+4*8^0 = 668</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x1a2b</span>); <span class="comment">// 1*16^3+10*16^2+2*16+11 = 6699</span></span><br></pre></td></tr></table></figure><h3 id="十进制转换为其他进制"><a href="#十进制转换为其他进制" class="headerlink" title="十进制转换为其他进制"></a>十进制转换为其他进制</h3><p>除以进制，然后将余数倒序排列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20 转换为二进制</span></span><br><span class="line"><span class="number">20</span>/<span class="number">2</span> = <span class="number">10</span> -<span class="number">-0</span></span><br><span class="line"><span class="number">10</span>/<span class="number">2</span> = <span class="number">5</span>  -<span class="number">-0</span></span><br><span class="line"><span class="number">5</span>/<span class="number">2</span>  = <span class="number">2</span>  -<span class="number">-1</span></span><br><span class="line"><span class="number">2</span>/<span class="number">2</span>  = <span class="number">1</span>  -<span class="number">-0</span></span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>  = <span class="number">0</span>  -<span class="number">-1</span></span><br><span class="line"><span class="comment">// 所以20的二进制为：010100</span></span><br></pre></td></tr></table></figure><h2 id="得到对象的方法"><a href="#得到对象的方法" class="headerlink" title="得到对象的方法"></a>得到对象的方法</h2><h3 id="1-直接写一个对象"><a href="#1-直接写一个对象" class="headerlink" title="1. 直接写一个对象"></a>1. 直接写一个对象</h3><blockquote><p>冒号前面不会解析变量，所以可加可不加引号；</p><p>冒号后面会解析变量，所以按情况添加引号。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:age,<span class="attr">say</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.dir(obj); <span class="comment">// &#123;age:18,name:'张三',say:f()&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-new一个对象"><a href="#2-new一个对象" class="headerlink" title="2. new一个对象"></a>2. <code>new</code>一个对象</h3><p>可以直接使用<code>new</code>，得到一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="3-通过document找页面上的dom对象"><a href="#3-通过document找页面上的dom对象" class="headerlink" title="3. 通过document找页面上的dom对象"></a>3. 通过<code>document</code>找页面上的<code>dom</code>对象</h3><p>通过使用<code>document</code>对象里面的相应方法得到页面上的<code>dom</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过id找单一对象</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id的值'</span>);</span><br><span class="line"><span class="comment">// 通过class找多个对象</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'class的值'</span>);</span><br><span class="line"><span class="comment">// 通过name找多个对象</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">'name的值'</span>);</span><br><span class="line"><span class="comment">// 通过标签名找多个对象</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'标签名'</span>);</span><br></pre></td></tr></table></figure><blockquote><p> 注意的是，除了通过<code>id</code>找到的对象都是对象的集合，哪怕只有一个。因此需要<code>for-in</code>循环遍历，然后通过下标得到每个单一对象。</p></blockquote><h3 id="对象成员属性和方法的访问及追加"><a href="#对象成员属性和方法的访问及追加" class="headerlink" title="对象成员属性和方法的访问及追加"></a>对象成员属性和方法的访问及追加</h3><p>访问成员属性和方法都可以使用点号<code>.</code>或中括号<code>[]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.name;</span><br><span class="line">obj[<span class="string">'name'</span>];</span><br></pre></td></tr></table></figure><blockquote><p>两者的区别在于：</p><p>点号后面不能跟数字，也不会解析变量，是静态的标识符。</p><p>中括号里面可以使用数字，回会析变量，可以是动态的字符串。</p></blockquote><p>访问成员方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.say(); <span class="comment">// 点号</span></span><br><span class="line">obj[<span class="string">'say'</span>](); <span class="comment">// 中括号</span></span><br></pre></td></tr></table></figure><p>追加或修改成员属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.age = <span class="number">9</span>; <span class="comment">// 点号</span></span><br><span class="line">obj[<span class="string">'height'</span>] = <span class="number">170</span>; <span class="comment">// 中括号</span></span><br></pre></td></tr></table></figure><p>追加或修改成员方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点号</span></span><br><span class="line">obj.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">456</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中括号</span></span><br><span class="line">obj[<span class="string">'say'</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">789</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h2><blockquote><p>基本类型：String / Number / Boolean / Null / Undefined</p><p>引用类型：Object / Array / Date / Function / Error / RegExp / Math / Number / String / Boolean / Globle</p></blockquote><p>引用类型是有方法和属性的，但基本类型是没有的。</p><p>基本类型有自己对应的包装对象<code>Sting</code>、<code>Number</code>、<code>Boolean</code>。</p><p>但是<code>null</code>和<code>undefined</code>没有包装对象。</p><p>我们都会遇到这种代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">var</span> string = str.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(string); <span class="comment">// h</span></span><br></pre></td></tr></table></figure><p>上面的<code>str</code>是字符串，是基本类型，但它却能召唤出<code>charAt()</code>的方法。</p><p>主要是因为：字符串去调方法的时候，基本类型会找到对应的包装对象类型，然后包装对象把所有的属性和方法给了基本类型，然后包装类型消失。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>; <span class="comment">// str是基本类型</span></span><br><span class="line"><span class="keyword">var</span> string = str.charAt(<span class="number">0</span>); <span class="comment">// 在执行到这一句的时候，后台会自动执行以下代码：</span></span><br><span class="line"><span class="comment">// 1 找到对应的包装对象类型，然后通过包装对象创建出一个和基本类型值相同的对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>);</span><br><span class="line"><span class="comment">// 2 这个对象调用包装对象的方法，并且返回结果给string</span></span><br><span class="line"><span class="keyword">var</span> string = str.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3 销毁这个临时创建的对象</span></span><br><span class="line">str = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 但上面3部动作是一瞬间的，实际上并没有改变字符串本身的值。</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>另一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>;</span><br><span class="line">str.number = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.number); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面最后显示<code>undefined</code>的原因是：</p><blockquote><p>但代码走到<code>str.number = 10</code>的时候，由于基本类型要添加一个属性，它会在基本类型所对应的包装对象下面创建一个对象，然后把10添加到了对象下面，添加完之后这个包装对象就消失了，然后再执行<code>console.log(str.number)</code>时，<code>str</code>又会重新执行上面的过程，重新创建一个对象，但新的包装对象是没有<code>number</code>这个属性的，所以结果就是<code>undefined</code>。</p></blockquote><h2 id="函数的定义、调用和返回值"><a href="#函数的定义、调用和返回值" class="headerlink" title="函数的定义、调用和返回值"></a>函数的定义、调用和返回值</h2><p>js中函数的定义和php中一模一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js中函数是提前声明，所以在函数的定义的代码前就可以调用函数。</p><p>js中函数是可以重复定义，后面的会覆盖前面同名函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">demo(); <span class="comment">// 456</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">456</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数如果没有<code>return</code>，那么默认返回<code>undefined</code>。</p><p>函数里面的<code>retrun</code>会终止代码的执行，也就是后续代码不会被执行。</p><p>函数形参的默认值为<code>undefined</code>，所以调用的时候不给实参也不会报错。</p></blockquote><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>js中有三种作用域：</p><ol><li><p>全局作用域</p><blockquote><p>函数外定义的变量</p></blockquote></li><li><p>函数作用域</p><blockquote><p>函数内使用<code>var</code>定义的变量</p></blockquote></li><li><p>块级作用域</p><blockquote><p>用<code>const</code>或<code>let</code>定义的变量</p><p><code>const</code>定义的变量不能修改，<code>let</code>定义的可以修改</p></blockquote></li></ol><p>局部变量的提前声明：</p><blockquote><p>函数内的局部变量会提前声明，所以函数内声明了局部变量，那么久无法直接访问到全局的同名变量。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 通过window对象访问全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.num); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="滚动的长标题"><a href="#滚动的长标题" class="headerlink" title="滚动的长标题"></a>滚动的长标题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！'</span>；</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置定时器，定时切割文字</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 将切割的文字赋给标题</span></span><br><span class="line"><span class="built_in">document</span>.title = str.substr(i);</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">// 如果切割完调回到0</span></span><br><span class="line"><span class="keyword">if</span> (i &gt;= str.length) i = <span class="number">0</span>;</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><h3 id="跑马灯"><a href="#跑马灯" class="headerlink" title="跑马灯"></a>跑马灯</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red;font-size:32px"</span>&gt;</span>我<span class="tag">&lt;/<span class="name">span</span>&gt;</span>是一个跑马灯，炫酷的跑马灯！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> str = <span class="string">'我是一个跑马灯，炫酷的跑马灯！'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置定时器</span></span></span><br><span class="line"><span class="javascript">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="xml">        div.innerHTML = str.substr(0,i)+'<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red;font-size:32px;"</span>&gt;</span>'+str.substr(i,1)+'<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+str.substr(i+1);</span></span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="comment">// 重置顺序</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i &gt;= str.length) i = <span class="number">0</span>;</span></span><br><span class="line">    &#125;, 300);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算随机个实参的和的函数"><a href="#计算随机个实参的和的函数" class="headerlink" title="计算随机个实参的和的函数"></a>计算随机个实参的和的函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'6'</span>,<span class="string">'7px'</span>,<span class="literal">true</span>,<span class="literal">false</span>); <span class="comment">// 21</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 循环遍历arguments对象 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">        <span class="comment">// 排除实参里面的true </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>[i] === <span class="literal">true</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 将纯数字字符串转换为数值，并排除其他字符串</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isNaN</span>(<span class="built_in">Number</span>(<span class="built_in">arguments</span>[i])))</span><br><span class="line">tmp += <span class="built_in">Number</span>(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进制转换的计算</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'class的值'</span>); <span class="comment">// 通过class得到多个对象</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">'name的值'</span>); <span class="comment">// 通过name得到多个对象</span></span><br><span class="line"><span class="built_in">arguments</span> <span class="comment">// 包含所有实参的集合</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">const</span> <span class="comment">// 定义变量</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown的食用方法</title>
      <link href="/%E5%B7%A5%E5%85%B7/markdown%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/%E5%B7%A5%E5%85%B7/markdown%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本博客里面的内容都是使用Markdown书写，为了防止以后书写博客忘记某个标记还需要到处翻网页，所以集合一下Markdown的语法。</p><a id="more"></a><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>Markdown支持6种级别的标题，对应<code>html</code>标签<code>h1~h6</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line"><span class="section">## h2</span></span><br><span class="line"><span class="section">### h3</span></span><br><span class="line"><span class="section">#### h4</span></span><br><span class="line"><span class="section">##### h5</span></span><br><span class="line"><span class="section">###### h6</span></span><br></pre></td></tr></table></figure><h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>使用<code>&gt;</code>用于段首进行强调，被强调的文字部分将会被高亮显示。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这段文字将被高亮显示</span></span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>这段文字将被高亮显示</p></blockquote><h1 id="插入连接或图片"><a href="#插入连接或图片" class="headerlink" title="插入连接或图片"></a>插入连接或图片</h1><p>区别在于插入图片前面需要添加一个感叹号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">点击跳转到百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line">![<span class="string">图片</span>](<span class="link">https://s2.ax1x.com/2019/09/21/nvLK0S.jpg</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">点击跳转到百度</a></p><p><img src="https://s2.ax1x.com/2019/09/21/nvLK0S.jpg" alt="图片"></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>Markdown支持有序列表和无序列表</p><ul><li>有序列表使用<code>*</code>、<code>+</code>或<code>-</code>标识</li><li>有序列表使用数字加<code>.</code>标识</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>黄瓜</span><br><span class="line"><span class="bullet">* </span>玉米</span><br><span class="line"><span class="bullet">* </span>茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>黄瓜</span><br><span class="line"><span class="bullet">+ </span>玉米</span><br><span class="line"><span class="bullet">+ </span>茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>黄瓜</span><br><span class="line"><span class="bullet">- </span>玉米</span><br><span class="line"><span class="bullet">- </span>茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>黄瓜</span><br><span class="line"><span class="bullet">2. </span>玉米</span><br><span class="line"><span class="bullet">3. </span>茄子</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ol><li>黄瓜</li><li>玉米</li><li>茄子</li></ol><p>如果在列表中包含多个段落，为保证渲染正常，*与段落首字母之间必须保留四个空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*    </span>段落</span><br><span class="line"></span><br><span class="line"><span class="code"> 小段</span></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><p>段落</p><p>小段</p></li></ul><p>如果在列表中加入区块引用，区块引用标记符也需要索引4个空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>段落</span><br><span class="line"><span class="code">&gt; 区块标记</span></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><p>段落</p><blockquote><p>区块标记</p></blockquote></li></ul><h1 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h1><p>Markdown比较流行的一个重要原因，就是它能轻松漂亮地插入代码。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内代码：<span class="code">`script`</span>。</span><br><span class="line">插入一整段：</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>这是一整段代码<br>​<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">行内代码：`script`。</span><br><span class="line">插入一整段：</span><br></pre></td></tr></table></figure></p><p>这是一整段代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分割线</span></span><br><span class="line"></span><br><span class="line"><span class="string">有时候，为了排版漂亮，可能会加入分割线。使用三个以上的`*`或`-`。</span></span><br><span class="line"></span><br><span class="line"><span class="string">```markdown</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>效果：</p><hr><hr><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>如果文字要添加删除线，只需要在文字两端加上两层波浪线<code>~~</code>即可</p><p>效果：</p><p><del>删除线</del></p><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p>下划线通过<code>html</code>的<code>&lt;u&gt;</code>来实现</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><p><u>下划线</u></p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>对文字进行强调，<code>*</code>或者<code>_</code>包裹即可。一层是斜体，两层是加粗。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这里是斜体*</span></span><br><span class="line"><span class="emphasis">_这里是斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这里是加粗**</span></span><br><span class="line"><span class="strong">__这里是加粗__</span></span><br></pre></td></tr></table></figure><p><em>这里是斜体</em><br><em>这里是斜体</em></p><p><strong>这里是加粗</strong><br>__这里是加粗</p><h1 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h1><p><code>:---</code>代表左对齐 <code>:---:</code>代表居中 <code>---:</code>代表右对齐</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">:---|:---:|---:</span><br><span class="line">项目|项目|项目</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td align="left">项目</td><td align="center">项目</td><td align="right">项目</td></tr></tbody></table><h1 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h1><p>Markdown使用反斜杠<code>\</code>转义特殊字符</p><p>特殊字符：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+   </span>加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><h1 id="支持HTML元素"><a href="#支持HTML元素" class="headerlink" title="支持HTML元素"></a>支持HTML元素</h1><p>目前支持的HTML元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等。如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure><p>效果：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p>最后流程图暂时不学习了。。。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记2</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B02/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<p>学习内容</p><blockquote><p>运算符、内置对象、流程控制以及类型转换。</p></blockquote><p>应用</p><blockquote><p>标题上新消息的闪动、表格隔行变色、全选反选。</p></blockquote><a id="more"></a><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符中需要注意的是 <code>+</code> 号，它不仅可以进行加法运算，还可以进行字符串拼接。</p><blockquote><p>两边都为数值的时候，进行加法运算；</p><p>任意一边是字符串，进行字符串拼接。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span> + <span class="number">100</span>); <span class="comment">// 200 加法运算</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span> + <span class="string">'100'</span>); <span class="comment">// 100100 字符串拼接</span></span><br></pre></td></tr></table></figure><p>另外就是数值型中的NaN。</p><blockquote><p><code>NaN</code> 不是一个数字的数值型 所有的<code>NaN</code>参与运算，结果一定是<code>NaN</code>。同时它也是js里面唯一一个自己都不等于自己的数。判断是否是NaN需要使用<code>isNaN()</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> + <span class="number">100</span>); <span class="comment">// NaN 加法运算</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> + <span class="string">'100'</span>); <span class="comment">// NaN100 字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NaN</span> == <span class="literal">NaN</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'相等'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'不相等'</span>);</span><br><span class="line">&#125; <span class="comment">// 不相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'是NaN'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'不是NaN'</span>);</span><br><span class="line">&#125; <span class="comment">// 是NaN</span></span><br></pre></td></tr></table></figure><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>逗号运算符用来同时声明变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b,c; <span class="comment">// 同时声明3个变量，值都是undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>,y,z = <span class="number">20</span>; <span class="comment">// 同时声明3个变量，各自赋值</span></span><br><span class="line"><span class="keyword">var</span> i = j = <span class="number">30</span>; <span class="comment">// 同时声明2个变量，值都为30</span></span><br></pre></td></tr></table></figure><h2 id="杂项运算符"><a href="#杂项运算符" class="headerlink" title="杂项运算符"></a>杂项运算符</h2><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h3><p>删除对象或者数组里面的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">delete</span> obj[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// [1,2,empty,4]</span></span><br></pre></td></tr></table></figure><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h3><p>检测变量的类型。</p><p>可能返回的值有6个：<code>string/number/boolean/object/undefined/function</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])); <span class="comment">// object    数组返回的是object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="literal">null</span>)); <span class="comment">// object    null返回的是object</span></span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>实例一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obje = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(obje); <span class="comment">// Mon Sep 23 2019 10:01:03 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="in"></a><code>in</code></h3><p>检测对象中是否有某个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="对象成员访问符"><a href="#对象成员访问符" class="headerlink" title="对象成员访问符"></a>对象成员访问符</h2><p>访问数组或者对象里面的元素，需要使用对象成员访问符<code>.</code>或<code>[]</code>。</p><p><code>.</code>和<code>[]</code>的区别：</p><blockquote><p> <code>.</code>号不能解析变量，不能跟数字。</p><p><code>[]</code>可以解析变量，可以放数字。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr<span class="number">.3</span>); <span class="comment">// 报错: missing ) after argument list</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'age'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.key); <span class="comment">// undefined .号后面不能解析变量，会寻找下标为key的键值对，然而该对象中没有下标为key的键值对，所以返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[key]); <span class="comment">// 18 []里面会解析变量，解析成['age'],再去搜索下标为age的键值对。</span></span><br></pre></td></tr></table></figure><p>js里面的数组无法手动制定下标，往数组后面添加数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr[arr.length] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2,3,4,5,hello]</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>i=1 这是初始条件，只会触发一次；</li><li>i&lt;100 这是判断条件，满足就继续循环，不满足就退出循环</li><li>i++ 这是每次循环后递增条件，每次循环后变量i都会+1</li><li>循环顺序：i=1 =&gt; i&lt;100成立 =&gt; 循环体 =&gt; i++ =&gt; i&lt;100成立 =&gt; 循环体 =&gt;…=&gt;i&lt;100不成立 =&gt; 退出循环</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a><code>while</code>循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">100</span>) &#123;</span><br><span class="line"><span class="comment">// 循环体</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环内变量<code>i</code>不断自增，知道不满足<code>while</code>条件，退出循环。</p><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do-while 循环"></a><code>do-while</code> 循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">// 循环体</span></span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><code>do-while</code>循环会至少执行1次，而<code>while</code>和<code>for</code>循环可能一次都不会执行</p><h3 id="fo-in循环"><a href="#fo-in循环" class="headerlink" title="fo-in循环"></a><code>fo-in</code>循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>;age:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'下标'</span>+key+<span class="string">'的值是：'</span>+obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for-in</code>可以把一个对象的所有属性依次循环出来</p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="if-else判断"><a href="#if-else判断" class="headerlink" title="if-else判断"></a><code>if-else</code>判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">21</span></span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="string">'是的2倍数'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="string">'是的3倍数'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="string">'既不是2的倍数，也不是3的倍数'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意的是如果某个条件成立，则后续就不再继续判断了。因此判断语句的顺序非常重要，一般将可能性更高的放在前面。</p><h3 id="switch-case判断"><a href="#switch-case判断" class="headerlink" title="switch-case判断"></a><code>switch-case</code>判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 使用的是 === 判断</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'一'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'二'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'漏网之鱼'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><ul><li><code>Number()</code> 转换为数值，在自动类型转换的时候调用</li><li><code>parseInt()</code> 转换为整数</li><li><code>parseFloat()</code> 转换为浮点数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">'100.2px'</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'100.2px'</span>)); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">'100.2px'</span>)); <span class="comment">// 100.2</span></span><br><span class="line"><span class="comment">// 便捷方法：让纯数字字符串与1相乘，即可把字符串快速转换为数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'123.31'</span> * <span class="number">1</span>); <span class="comment">// 123.31</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> * <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> * <span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">false</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><code>String()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">false</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p><code>Boolean()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">''</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">'0'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 要把任何值转换为布尔型数据，在值的前面增加两个叹号即可</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">100</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="【新消息】闪动"><a href="#【新消息】闪动" class="headerlink" title="【新消息】闪动"></a>【新消息】闪动</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title == <span class="string">'【新消息】'</span> ? <span class="built_in">document</span>.title = <span class="string">'【新消息】'</span> : <span class="built_in">document</span>.title = <span class="string">'【　　　】'</span>;</span><br><span class="line">&#125;, <span class="number">500</span>); <span class="comment">// 0.5秒闪动一次</span></span><br></pre></td></tr></table></figure><h2 id="循环输出表格并隔行变色"><a href="#循环输出表格并隔行变色" class="headerlink" title="循环输出表格并隔行变色"></a>循环输出表格并隔行变色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;table border width="500"&gt;'</span>);</span><br><span class="line"><span class="comment">// 循环输出行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;tr&gt;'</span>);</span><br><span class="line">    <span class="comment">// 循环输出单元格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;td&gt;123&lt;/td&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;/tr&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;/table&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过标签名找对象 找到的一定是一个数组，需要通过下标才能选中单个对象</span></span><br><span class="line"><span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'tr'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trs.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        trs[i].style.background = <span class="string">'lightblue'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复选框的全选和反选"><a href="#复选框的全选和反选" class="headerlink" title="复选框的全选和反选"></a>复选框的全选和反选</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>##############<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>##############<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>##############<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"check(true)"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"check(false)"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"check('invert')"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">flag</span>)</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (flag == <span class="string">'invert'</span>) &#123;</span></span><br><span class="line">                inputs[i].checked = !inputs[i].checked;</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                inputs[i].checked = flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>() <span class="comment">// 检查是否是NaN</span></span><br><span class="line"><span class="keyword">delete</span> <span class="comment">// 删除对象或者数组里面的元素</span></span><br><span class="line"><span class="comment">// 获取年月日时分秒</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">time.getFullYear(); <span class="comment">// 年</span></span><br><span class="line">time.getMonth();    <span class="comment">// 月</span></span><br><span class="line">time.getDate();     <span class="comment">// 日</span></span><br><span class="line">time.getHours();    <span class="comment">// 时</span></span><br><span class="line">time.getMinutes();  <span class="comment">// 分</span></span><br><span class="line">time.getSeconds();  <span class="comment">// 秒</span></span><br><span class="line">time.getTime();     <span class="comment">// 获取时间戳</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'标签名'</span>); <span class="comment">// 通过标签名找对象</span></span><br><span class="line"><span class="built_in">Number</span>(); <span class="comment">// 强制转换为数值型</span></span><br><span class="line"><span class="built_in">parseInt</span>(); <span class="comment">// 强制转换为整数</span></span><br><span class="line"><span class="built_in">parseFloat</span>(); <span class="comment">// 强制转换为浮点数</span></span><br><span class="line"><span class="built_in">String</span>(); <span class="comment">// 强制转换为字符串</span></span><br><span class="line"><span class="built_in">Boolean</span>(); <span class="comment">// 强制转换为布尔型</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的学习日记1</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/JavaScript%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>随着 Web 的发展，网页设计人员希望页面能够与用户进行交互，于是就催生了 JavaScript 语言。</p><p>JavaScript 是一种轻量级、解释型的 Web 开发语言。由于所有现代浏览器都已嵌入 JavaScript 引擎， JavaScript 源代码可以在浏览器中直接被解释执行，所以不用担心支持问题。</p><p>第一天的学习内容：</p><blockquote><ul><li>JavaScript 的使用方式</li><li>JavaScript 的输出方式</li><li>JavaScript 的语法基础</li><li>JavaScript 的语法特性</li><li>JavaScript 的数据类型中的原始类型</li></ul></blockquote><p>应用：</p><blockquote><ul><li>跟随鼠标的图片</li><li>打字机效果</li></ul></blockquote><a id="more"></a><h2 id="JavaScript-的使用方式"><a href="#JavaScript-的使用方式" class="headerlink" title="JavaScript 的使用方式"></a>JavaScript 的使用方式</h2><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><p>使用&lt;script&gt;标签对，可以把 JavaScript 源代码直接放到网页文档中。例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'内嵌式'</span>); <span class="comment">// 弹窗并显示文字：“内嵌式”</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;script&gt;标签作为脚本语言的标识符来分隔其他源代码，避免与 HTML 标签和 CSS 样式代码混淆。</p><blockquote><p>在解析网页源代码时，浏览器检索到&lt;script&gt;标签时，会自动调用 JavaScript 引擎对其中包含的字符信息进行解释处理。</p></blockquote><p>一般来说，JavaScript 代码可以被嵌入到网页中任何位置，如&lt;head&gt;标签的顶部、&lt;head&gt;和&lt;/head&gt;标签之间、&lt;body&gt;标签内部，甚至可以被放在&lt;html&gt;或&lt;/html&gt;标签的外部，浏览器都能够正确解析。</p><p>但是，根据 W3C 标准，&lt;script&gt;标签作为 HTML 文档的一个节点而存在。因此，<strong>它应该包含在&lt;html&gt;和&lt;/html&gt;根节点内，以便构成合理的结构，方便 DOM 控制。</strong></p><p>另一方面，无处不在的 JavaScript 脚本会给管理带来麻烦，甚至会酿成各种错误。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).style.fontSize = <span class="string">'50px'</span>;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">            JavaScript 脚本能随意放置？</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们本希望&lt;p&gt;标签中的文字字体大小为50像素。但是，在浏览器中预览，发现页面文本并没有变化，原因就是脚本位置不对，没有起到作用：</p><p><img src="https://s2.ax1x.com/2019/10/04/uBgiM6.png" alt="失效的 JavaScript 脚本"></p><blockquote><p>原因在于：引擎是按着从上到下的顺序来解析网页源代码的。在解析 JavaScript 脚本时，由于&lt;p id=”box”&gt;标签还没有被解析，因此脚本引擎就无法找到 id 为 box 的元素而失去作用，所以页面中的文本依旧显示默认字体大小。</p></blockquote><p>因此，<strong>JavaScript 脚本写在&lt;head&gt;和&lt;/head&gt;标签之间，或者写在&lt;body&gt;和&lt;/body&gt;标签之间。</strong></p><blockquote><p>每个网页可以包含多个&lt;script&gt;标签，每个&lt;script&gt;标签包含的代码被称为 JavaScript 脚本块。</p><p>一般建议把相同或相近功能的代码放在一个脚本块中，而不同的功能代码分别放在不同脚本块中会更适宜管理。</p><p><strong>各种公共函数和变量应放在&lt;head&gt;和&lt;/head&gt;标签之间，而将页面加载期间执行的代码、DOM 对象初始化以及与 DOM 相关的全局引用赋值操作放在&lt;body&gt;和&lt;/boyd&gt;标签之间。</strong></p></blockquote><hr><h3 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h3><p>用过&lt;script&gt;标签对的<code>src</code>属性引入外部 JavaScript 文件。例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js文件路径地址"</span>&gt;这里面的所有代码都会被屏蔽&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>与 CSS 文件一样，JavaScript 代码也可以存放在独立的文件中，以增强 JavaScript 脚本的可重复调用。JavaScript 文件是一个文本类型的文件，在任何文本编辑器中都可以被打开和编辑，JavaScript 文件的扩展名为 js 。</p><blockquote><p>重用性一直是应用开发中的一个重要话题。<strong>所谓重用性就是相同的代码能够被反复利用</strong>。这对于大型项目开发显得非常重要，因为项目中很多页面或区域的功能都是相同的，如果在不同文件或区域内反复编写相同的代码块，这会浪费大量资源和时间，后期维护的工作量也会很大。</p></blockquote><blockquote><p>使用外部 JavaScript 文件，能够增强 JavaScript 模块化开发的程度，提高代码的重用率。在网页开发中，用户应该养成代码重用的良好习惯，在编写 JavaScript 代码时，多使用外部 JavaScript 文件，这样能够提高项目开发的速度和效益。</p></blockquote><hr><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>直接书写在标签身上，是一个简写的事件，又称为事件属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一般的，会给事件赋一个函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"func()"</span>&gt;</span>点我呀<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开发中不推荐这种方式：</p><blockquote><p>这种方式跟页面结构代码耦合性太强了，后期维护很不方便。</p><p>在开发过程中会导致产生很多的冗余代码。</p></blockquote><h2 id="JavaScript-的输出方式"><a href="#JavaScript-的输出方式" class="headerlink" title="JavaScript 的输出方式"></a>JavaScript 的输出方式</h2><p>JavaScript 不提供任何内建的打印或显示函数。</p><p>如果我们想查看 JavaScript 中某个变量的值，我们会有如下的方法：</p><ol><li><p>弹窗输出，写入警告框。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(demo);</span><br></pre></td></tr></table></figure></li><li><p>控制台打印，写入浏览器控制台。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(demo); <span class="comment">// 打印基本数据类型</span></span><br><span class="line"><span class="built_in">console</span>.dir(demo); <span class="comment">// 打印符合类型</span></span><br></pre></td></tr></table></figure></li><li><p>直接输出当前页面，写入 HTML 输出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(demo);</span><br></pre></td></tr></table></figure><p>在 HTML 文档完全加载后使用 <code>document.write()</code> 将删除所有已有的 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"document.write(5 + 6)"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面例子中，如果点击按钮，会清除页面所有内容，然后显示 “11” 。</p><p>因此<code>document.write()</code>方法仅用于测试，以免发生不确定事件。</p></li><li><p>开启断点调试，需要打开控制台，右键-检查或者F12，并在菜单中选择控制台查看。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">debugger</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="JavaScript-的语法基础"><a href="#JavaScript-的语法基础" class="headerlink" title="JavaScript 的语法基础"></a>JavaScript 的语法基础</h2><h3 id="语言编码"><a href="#语言编码" class="headerlink" title="语言编码"></a>语言编码</h3><p>JavaScript 语言建立在 Unicode 字符集基础之上，因此在脚本中，用户可以使用双字节的字符命名常量、变量或函数等。</p><p>但是，考虑到 JavaScript 脚本嵌入在网页中，如果网页编码与脚本字符编码不同，将会存在风险，所以建议用户不要使用中文命名，但在注释中可以考虑使用中文字符。</p><h3 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h3><p>与 HTML 标签和 CSS 样式码不同，JavaScript 对于大小写是非常铭感的，比如 test 与变量 TEST 是不用的。为了避免出错：</p><ul><li>应使用小写字符命名变量；</li><li>对于保留字可根据系统的默认大小写来输入；</li><li>对于特定变量，可以使用大写字符，或者以大写字符开头，如类、构造函数等；</li><li>对于复合型变量，可以遵循一般编程的驼峰式命名法，即混合使用大小写字母来构成变量的名称，名称的第一个单词全部小写，后面的单词首字母大写。</li></ul><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p>JavaScript 一般会忽略分隔符，如空格符、制表符和换行符。在保证不引起歧义的情况下，可以利用分隔符对脚本进行排版。</p><h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h3><p>JavaScript 支持两种注释形式：</p><ul><li>单行注释，以双斜杠来表示：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br></pre></td></tr></table></figure><ul><li>多行注释，以/*和*/分隔符进行标识：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在 JavaScript 脚本中可以加上标签，方便 JavaScript 程序进行快速定位。</p><p>标签一般由一个合法的字符名称加上一个冒号组成，标签可以放在任意行的起始位置。这样就可以为改行设置一个标记，然后再结构体中使用 break、continue 等跳转语句跳出循环结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loop: <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">6</span>; j++) &#123;   <span class="comment">// 定义外循环，并添加标签名称</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;br&gt;'</span> + j + <span class="string">':'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;     <span class="comment">// 定义内循环</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) <span class="keyword">continue</span> loop;    <span class="comment">// 当临时递增变量 i 的值为3时，跳出外循环，重新开始</span></span><br><span class="line">        <span class="built_in">document</span>.write(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/04/uB5dN8.png" alt="标签的应用"></p><p>可以看到变量 i 之能够输出1和2，因为当为3时，就跳出循环，无法显示。</p><h3 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h3><blockquote><p>关键字是指 JavaScript 默认定义具有特殊含义的词汇，有指令名、语句名、函数名、方法名、对象名、属性名。不能用作变量名或函数名。</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/04/uBTz2F.png" alt="uBTz2F.png"></p><blockquote><p>保留字就是现在还没有使用，但是预留以后作为关键字使用。</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/04/uBTx8U.png" alt="uBTx8U.png"></p><h2 id="JavaScript-语法特性"><a href="#JavaScript-语法特性" class="headerlink" title="JavaScript 语法特性"></a>JavaScript 语法特性</h2><h3 id="词"><a href="#词" class="headerlink" title="词"></a>词</h3><p>词是 JavaScript 语言的最小语义单元，包括常量、变量、运算符、表达式、指令、修饰符等。</p><p>词之间以空格进行分割。</p><h3 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h3><p>句子是由一个或多个词构成的完整逻辑部分。</p><p>句子以分号<code>;</code>作为结束标识，有时候省略分号，也可以以换行符作为一句结束的标识，但这种做法在特定情况下容易引发解析错误，因此在所有句子后面都要增加一个分号。</p><p>一个句子一般至少包含一个词，或一个段落，或一个分号。如果仅有一个分号构成的句子，成为空语句。</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落是由一对大括号<code>{}</code>包含的一段代码。</p><p>段落内容可以是一句或多句完整的句子。也可以在段落内嵌套另一个段落，形成结构嵌套。</p><p>段落前面可以增加修饰词，所谓修饰词就是限制对象的谓词，如域谓词（指明对象的作用域，或作用范围）、逻辑谓词（逻辑关系）、函数谓词（函数名、函数参数）。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象 {}"></a>对象 <code>{}</code></h3><p>对象都以左大括号<code>{</code>开始，以右大括号<code>}</code>结束，里面一个或多个“名/值”对，多个“名/值”对之间没有先后顺序之分。</p><p>每个“名/值”对内的“名”和“值”之间使用冒号<code>:</code>进行分隔，而“名/值”对与“名/值”对之间使用逗号<code>,</code>分隔：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    name1 : value1,</span><br><span class="line">    name2 : value2,</span><br><span class="line">    name3 : value3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只用点号<code>.</code>可以引用对象的属性和方法，在调用对象方法时需要在函数名称后面补加小括号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object.name1;</span><br><span class="line">object.func();</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组 []"></a>数组 <code>[]</code></h3><p>数组都是以左中括号<code>[</code>开始，以右中括号<code>]</code>结束，中间可以包含多值，值之间使用逗号<code>,</code>分隔。</p><p>数组是值的有序集合，所谓有序就是指多个值之间必须按先后顺序排列在一起，能够根据序号可以找到对应的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">    <span class="string">'张三'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在调用数组时，可以通过数组的下标序号来定位，<strong>其中第一个元素的序号为0</strong>，第二个值为一个函数，需要在值的后面增加一对小括号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array[<span class="number">0</span>]; <span class="comment">// 张三</span></span><br><span class="line">array[<span class="number">1</span>](); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h3 id="调用和逻辑分隔"><a href="#调用和逻辑分隔" class="headerlink" title="调用和逻辑分隔 ()"></a>调用和逻辑分隔 <code>()</code></h3><p>在 JavaScript 中，小括号<code>()</code>表示一个运算符，用于调用函数。</p><p>小括号也可以作为逻辑分隔符，在定义函数时，放在函数名称的后面，用来分隔函数与参数。</p><p>在表达式中，小括号可以分隔子表达式，以提升表达式的运算优先级。</p><p>另外，小括号在正则表达式的字符模式中还可以用来分组。</p><h3 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h3><p>JavaScript 暂不支持 constant 关键字，不允许用户自定义常量，但提供了几个默认常量供开发使用，这些系统常量主要是数学和数值常量，方便数学运算和特殊值引用。</p><p>JavaScript 使用 <code>var</code>关键字声明变量。也支持不使用<code>var</code>命名，直接使用未声明的变量。但建议遵循<strong>先声明后使用</strong>的原则。</p><p>声明变量之后，在没有初始化之前，则它的初始值为<code>undefinded</code>(未定义的变量)。</p><p>变量命名规则如下：</p><blockquote><p>首字符必须是大写 或小写的字母、下划线<code>_</code>或美元符<code>$</code>，后续的字符可以是字母、数字、下划线或者美元符。</p><p>变量名称不能是 JavaScript 关键字或保留字。</p><p>变量名称长度任意，但要区分大小写。</p></blockquote><p>除了上面硬性约束之外，还应遵循下面软性约束：</p><blockquote><p>变量声明应集中、置顶，如文档的前面、代码段的前面，或者函数内的上面。</p><p>使用局部变量。不要把所有变量都放置在段首，如果仅在函数内使用，建议在函数内声明。</p><p>变量名称应该易于理解。</p><p>避免混乱。声明变量之前，应该规划好，避免类似 usrname 与 usrName 混用现象。</p></blockquote><p>在函数内部使用<code>var</code>关键字声明的变量就是私有变量，该变量的作用域仅限于当前函数体内，但是如果不适用<code>var</code>关键字定义的变量都是全局变量，不管是在函数内或者函数外，在整个页面脚本中都是可见的。</p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>表达式是指可以运算，且必须返回一个确定的值的式子。表达式一般由常量、变量、运算符、子表达式构成。</p><p>最简单的表达式可以是一个简单的值、常量或者变量。</p><p>值表达式的返回值为它本身，变量表达式的返回值为变量存储或引用的值。</p><h2 id="JavaScript-中的数据类型"><a href="#JavaScript-中的数据类型" class="headerlink" title="JavaScript 中的数据类型"></a>JavaScript 中的数据类型</h2><blockquote><p>原始类型：字符串 String<code>数值型</code>Number<code>布尔型</code>Boolean<code>未定义</code>Undefined<code>空</code>Null`</p><p>引用类型：对象 Object<code>数组</code>Array` </p><p>查看数据类型： typeof </p></blockquote><hr><h3 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h3><p><code>typeof</code> 用来检查数据类型。返回值如下：</p><ul><li>undefined 变量是 undefined 类型</li><li>boolean 变量是 boolean 类型</li><li>number 变量是 number 类型</li><li>string 变量是 string 类型</li><li>object 变量是引用类型或null类型</li></ul><hr><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p><code>undefined</code>表示未定义的值，当变量未初始化值时，会默认其值为 undefined 。</p><p>另外当函数无明确返回值时，返回的也是 undefined 。</p><hr><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>null 表示空值。当对象为空，或者变量没有引用任何对象，其返回值为 null 。</p><p>注意的是，值 undefined 实际上是从值 null 派生来的，因此把它们定义为相等:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>尽管两个值相等，但它们的含义不同：</p><blockquote><p>undefined 是声明了变量但为对其初始化时赋予该变量的值</p><p>null 则用来表示尚未存在的对象。</p></blockquote><hr><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="解析字符串"><a href="#解析字符串" class="headerlink" title="解析字符串"></a>解析字符串</h4><p>字符串中单双引号没有区别，都不能解析变量。</p><p>单双引号可以包含对方，包含自己的时候可以用转义字符<code>\</code>来识别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'I\'m "OK".'</span>); <span class="comment">//I'm "OK".</span></span><br></pre></td></tr></table></figure><p>解析变量可以使用`` 或者<code>+</code> 进行拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'bob'</span>; <span class="comment">// var 用于声明变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is name'</span>); <span class="comment">// My name is name单引号不能解析变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"My name is name"</span>); <span class="comment">// My name is name双引号也不能解析变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// My name is bob``解析变量，需要在变量外加$&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is '</span> + name); <span class="comment">// My name is bob js中使用+号作为字符串的拼接符</span></span><br></pre></td></tr></table></figure><h4 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h4><p>获取字符串的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p>获取字符串中指定位置的字符，索引号从0开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]); <span class="comment">// H</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">15</span>]); <span class="comment">// 超过范围不会报错，但会返回undefined</span></span><br></pre></td></tr></table></figure><p>字符串是不可变的，对字符串的索引赋值，不会报错，但也没有任何效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str[<span class="number">0</span>] = <span class="string">'Y'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>字符串的常用方法。注意的是，这些方法不会改变原有字符串的内容，而是返回一个新的字符串</p><p>把字符串全部变为大写 <code>toUpperCase()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()); <span class="comment">// HELLO WORLD</span></span><br></pre></td></tr></table></figure><p>把字符串全部变为小写 <code>toLowerCase()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>搜索指定字符串出现的位置 <code>indexOf()</code> 如果存在返回出现的索引，否则返回-1</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indeOf(<span class="string">'Hello'</span>)); <span class="comment">// 0</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indeOf(<span class="string">'hello'</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>提取指定区间的子字符串 <code>substring()</code></p><p>如果不传第二个值则提取后面所有，有第二个值的时候不包含第二个值的索引，超过最大值不会添加其他，第一个值超过最大长度的情况没看懂，以后补充。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>, <span class="number">4</span>));  <span class="comment">// ell</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>));     <span class="comment">// lo world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">5</span>, <span class="number">15</span>)); <span class="comment">//  world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">15</span>));    <span class="comment">//</span></span><br></pre></td></tr></table></figure><hr><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>数值型中<code>NaN</code>表示无法计算结果,非数。<code>Infinity</code>表示无限大。</p><p>注意的是<code>NaN</code>它与自身不相等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>因此，判断是否是 NaN 需要使用函数<code>isNaN()</code>进行判断。</p><p>数值型的计算是将数字转成二进制进行计算再转换成十进制，所以有时候小数的计算是出人意料的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.7</span> + <span class="number">0.1</span>  == <span class="number">0.8</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>0</code>开头的是八进制，<code>0x</code>开头的是十六进制，<code>0b</code>开头的是二进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">011</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x11</span>); <span class="comment">// 17 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><hr><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>只有两个值 <code>true</code>和<code>false</code>。</p><p>其他类型转换为布尔型得到<code>false</code>的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数值型：<span class="number">0</span> <span class="number">0.0</span></span><br><span class="line">字符串：<span class="string">''</span></span><br><span class="line">特殊类型： <span class="literal">null</span> <span class="literal">undefined</span></span><br><span class="line">注意的是字符串中 <span class="string">'0'</span>和<span class="string">' '</span>都为真</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="跟随鼠标移动的图片"><a href="#跟随鼠标移动的图片" class="headerlink" title="跟随鼠标移动的图片"></a>跟随鼠标移动的图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">"pic"</span> src=<span class="string">"1.jpg"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 通过id获取元素</span></span><br><span class="line"><span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">'pic'</span>);</span><br><span class="line"><span class="comment">// 给window对象绑定一个鼠标移动事件</span></span><br><span class="line"><span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 获取鼠标的X轴</span></span><br><span class="line"><span class="keyword">var</span> X = e.clientX;</span><br><span class="line"><span class="comment">// 获取鼠标的Y轴</span></span><br><span class="line"><span class="keyword">var</span> Y = e.clientY;</span><br><span class="line"><span class="comment">// 分别修改左外边距和上外边距</span></span><br><span class="line">pic.style.marginLeft = e.clientX + <span class="string">'px'</span>;</span><br><span class="line">pic.style.marginTop = e.clientY + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a>打字机效果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"p"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 通过id获取元素</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">'p'</span>);</span><br><span class="line"><span class="comment">// 设置需要显示的文字</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'生活是一种绵延不绝的渴望，渴望不断上升，变得更伟大而高贵。 —— 杜伽尔'</span>;</span><br><span class="line"><span class="comment">// 设置初始值</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 设置定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 提取文字</span></span><br><span class="line"><span class="keyword">var</span> res = str.substring(<span class="number">0</span>, i);</span><br><span class="line"><span class="comment">// 改变p标签的属性</span></span><br><span class="line">p.innerHTML = res;</span><br><span class="line"><span class="comment">// 自增变量i</span></span><br><span class="line">i++;</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">alert()<span class="comment">// 弹窗</span></span><br><span class="line"><span class="built_in">console</span>.log()</span><br><span class="line"><span class="built_in">console</span>.dir() <span class="comment">// 控制台打印</span></span><br><span class="line"><span class="built_in">document</span>.write() <span class="comment">// 页面书写</span></span><br><span class="line"><span class="built_in">document</span>.getElementById() <span class="comment">// 通过id获取元素</span></span><br><span class="line"><span class="keyword">var</span> <span class="comment">// 声明变量</span></span><br><span class="line">innerHTML <span class="comment">// 标签对中间的文本，只有标签对才有</span></span><br><span class="line"><span class="keyword">debugger</span> <span class="comment">// 断点调试</span></span><br><span class="line">onmousemove <span class="comment">// 鼠标移动事件</span></span><br><span class="line">clientX <span class="comment">// 鼠标X轴</span></span><br><span class="line">clientY <span class="comment">// 鼠标Y轴</span></span><br><span class="line">typeOf  <span class="comment">// 获取数据类型</span></span><br><span class="line">setTimeout(回调函数, 事件) <span class="comment">// 一次性定时器 时间单位：毫秒</span></span><br><span class="line">setInterval(回调函数, 事件) <span class="comment">// 周期性定时器</span></span><br><span class="line">clearTimeout(定时器的返回值)  <span class="comment">// 清除一次性定时器</span></span><br><span class="line">clearInterval(定时器的返回值)  <span class="comment">// 清除周期性定时器</span></span><br><span class="line">substring(开始索引[, 结束索引]) <span class="comment">// 提取指定区间的子字符串</span></span><br><span class="line">toUpperCase() <span class="comment">// 将字符串改为大写</span></span><br><span class="line">toLowerCase() <span class="comment">// 将字符串改为小写</span></span><br><span class="line">indexOf() <span class="comment">// 查询是否存在子字符串</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/%E5%B7%A5%E5%85%B7/my-first-blog/"/>
      <url>/%E5%B7%A5%E5%85%B7/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p>今天利用来之不易的时间学习了使用hexo-github建立博客，根本目的是用来记录自己的学习情况。</p><p>第一篇博客用来说明hexo的基本使用，方便我今后查看。</p><a id="more"></a><table><thead><tr><th align="left">文件/文件夹</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">_config.yml</td><td align="left">配置文件</td></tr><tr><td align="left">public</td><td align="left">生成的静态文件，这个目录最终会发布到服务器</td></tr><tr><td align="left">scaffolds</td><td align="left">一些通用的markdown模板</td></tr><tr><td align="left">source</td><td align="left">编写的markdown文件， _drafts草稿文件，_posts发表的文章</td></tr><tr><td align="left">themes</td><td align="left">博客的模板</td></tr></tbody></table><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><ol><li><p>使用命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>[layout]&lt;title&gt;</span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>"post title with whitespace<span class="string">"</span></span><br></pre></td></tr></table></figure></li><li><p>直接在_drafts新建草稿，在_posts新建发布文章。顶部的相关描述：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">说明</span> <span class="string">//</span> <span class="string">文章页面上显示名称</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-9</span><span class="bullet">-17</span> <span class="number">18</span><span class="string">:18:18//</span> <span class="string">文章生成时间</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">默认分类</span> <span class="string">//</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">//</span> <span class="string">开启文章的评论功能</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[tag1,tag2]</span> <span class="string">//文章标签，可空</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">//附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></span><br><span class="line"><span class="attr">top:</span> <span class="string">//</span> <span class="string">置顶</span> <span class="string">按数字从小到大排序</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">以下是正文</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> hexo g <span class="comment">// 生成静态文件</span></span><br><span class="line"><span class="symbol">$</span> hexo s <span class="comment">// 启动服务器</span></span><br><span class="line"><span class="symbol">$</span> hexo p <span class="comment">// 发表草稿</span></span><br><span class="line"><span class="symbol">$</span> hexo d <span class="comment">// 部署网站</span></span><br><span class="line"><span class="symbol">$</span> hexo clean <span class="comment">// 清除缓存文件和已生成的静态文件</span></span><br><span class="line"><span class="symbol">$</span> hexo g -d <span class="comment">// 完成后部署</span></span><br></pre></td></tr></table></figure><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="引用块-1"><a href="#引用块-1" class="headerlink" title="引用块"></a>引用块</h3><p>在文章中插入代码</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock <span class="string">[title]</span> <span class="string">[lang:language]</span> <span class="string">[url]</span> <span class="string">[link text]</span> %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>在文章中插入指定大小的图片</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] <span class="string">"title text 'alt text'"</span> %&#125;</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>在文章中插入链接，并自动给外部链接添加target=”_blank”属性</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><h3 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h3><p>在文章中使用<code>&lt;!-- more --&gt;</code>，那么前面的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
